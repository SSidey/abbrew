{"version":3,"file":"abbrew.mjs","sources":["../module/helpers/dice.mjs","../module/documents/attackprofile.mjs","../module/rules/rules-data/abbrew-rule.mjs","../module/helpers/config.mjs","../module/rules/rules-data/active-effect.mjs","../module/rules/choice-set-prompt.mjs","../module/rules/rules-data/choice-set.mjs","../module/rules/rule-field.mjs","../module/rules/rule-source.mjs","../module/rules/rules.mjs","../module/helpers/write-to-path.mjs","../module/documents/actor.mjs","../module/documents/item.mjs","../module/helpers/chat.mjs","../module/helpers/effects.mjs","../module/sheets/actor-sheet.mjs","../module/sheets/item-sheet.mjs","../module/sheets/item-anatomy-sheet.mjs","../module/helpers/templates.mjs","../module/helpers/abbrew-roll.mjs","../module/helpers/turn-start.mjs","../module/abbrew.mjs"],"sourcesContent":["export async function d10Roll({\r\n    parts = [], data = {}, title,\r\n    flavour, dialogOptions, messageData = {}, options = {},\r\n    chatMessage = true, rollMode, flavor\r\n}) {\r\n\r\n    // TODO: Set up concept page, maybe under conditions?\r\n    // TODO: Negate should be an int value so as not to be too strong.\r\n    let dice = 1 + data.amplification;\r\n    let weakness = 0 + data.weakness\r\n\r\n    dice = '' + dice;\r\n    weakness = '' + weakness;\r\n\r\n    const fullParts = ['{' + dice + 'd10x>=' + data.criticalThreshold, ...parts];\r\n\r\n    const formula = fullParts.join('+') + ' -' + weakness + 'd10, 0}kh';\r\n\r\n    const defaultRollMode = rollMode || game.settings.get(\"core\", \"rollMode\");\r\n\r\n    const rollOptions = foundry.utils.mergeObject(options, {\r\n        flavor: flavor || title,\r\n        defaultRollMode,\r\n        rollMode\r\n    });\r\n\r\n    const roll = new CONFIG.Dice.AbbrewRoll(formula, data);\r\n\r\n    const configured = await roll.configureDialog({ title: \"Additional Modifiers\" });\r\n\r\n    await roll.evaluate({ async: true });\r\n\r\n    messageData = {};\r\n    messageData.flags = { data: data };\r\n\r\n    await roll.toMessage(messageData);\r\n}","import { d10Roll } from \"../helpers/dice.mjs\";\r\n\r\nHooks.on('init', () => {\r\n  $(document).on('click', '.damage-application button', onDamageAccept);\r\n});\r\n\r\nexport class AbbrewAttackProfile {\r\n  id = \"\";\r\n  abilityModifier = \"\";\r\n  damageBase = 0;\r\n  isWeapon = false;\r\n  weapon = {};\r\n  isMagic = false;\r\n  magic = {};\r\n\r\n  constructor(id, abilityModifier, damageBase, isWeapon, weapon, isMagic, magic) {\r\n    this.id = id;\r\n    this.abilityModifier = abilityModifier;\r\n    this.damageBase = damageBase;\r\n    this.isWeapon = isWeapon;\r\n    this.weapon = weapon;\r\n    this.isMagic = isMagic;\r\n    this.magic = magic;\r\n  }\r\n}\r\n\r\nexport async function useAttack(attack, attackProfile, actor) {\r\n\r\n  let title = `${attack.name} - ${game.i18n.localize(\"ABBREW.AttackRoll\")}`;\r\n\r\n  const rollData = getRollData(actor, attack, attackProfile);\r\n\r\n  // HERE: Look at skill rolls in 5e\r\n  // TODO: FUCKER WAS COMING FROM HERE\r\n  rollData.mod = 10;\r\n\r\n  // Compose roll options\r\n  const rollConfig = {\r\n    parts: [attackProfile.abilityModifier, '@attackProfile.damageBase'],\r\n    data: rollData,\r\n    title,\r\n    flavour: title,\r\n    dialogOptions: {\r\n      width: 400,\r\n      top: null,\r\n      left: window.innerWidth - 710\r\n    },\r\n    messageData: {\r\n      \"flags.abbrew.roll\": { type: \"attack\", attack: attack.id, attackProfile: attackProfile.id },\r\n      speaker: ChatMessage.getSpeaker({ actor: actor })\r\n    },\r\n    options: {\r\n      \"damageType\": attackProfile.damageType\r\n    }\r\n  };\r\n\r\n  const roll = await d10Roll(rollConfig);\r\n\r\n  return roll;\r\n}\r\n\r\nfunction getRollData(actor, attack, attackProfile) {\r\n  // If present, return the actor's roll data.\r\n  if (!actor) return null;\r\n  const rollData = actor.getRollData();\r\n  // Grab the item's system data as well.\r\n  rollData.attack = foundry.utils.deepClone(attack);\r\n  rollData.attackProfile = foundry.utils.deepClone(attackProfile);\r\n  rollData.criticalThreshold = getCriticalThreshold(actor, attackProfile);\r\n  rollData.amplification = getAmplification(actor, attackProfile);\r\n  rollData.weakness = getWeakness(actor, attackProfile);\r\n\r\n  return rollData;\r\n}\r\n\r\nfunction getCriticalThreshold(actor, attackProfile) {\r\n  const weaponThreshold = attackProfile.weapon.criticalThreshold;\r\n  const damageType = attackProfile.weapon.damageType;\r\n  const globalThreshold = actor.system.concepts['attack'].criticalThreshold;\r\n  let damageTypeThreshold = 10;\r\n  if (actor.system.concepts[damageType]) {\r\n    damageTypeThreshold = actor.system.concepts[damageType].criticalThreshold;\r\n  }\r\n\r\n  const calculatedThreshold = Math.min(weaponThreshold, globalThreshold, damageTypeThreshold)\r\n\r\n  // ABBREW: Minimum critical threshold is 5.\r\n  return Math.max(calculatedThreshold, 5);\r\n}\r\n\r\nfunction getAmplification(actor, attackProfile) {\r\n  const damageType = attackProfile.weapon.damageType;\r\n  return actor.system.concepts[damageType] ? actor.system.concepts[damageType].amplification : 0;\r\n}\r\n\r\nfunction getWeakness(actor, attackProfile) {\r\n  const damageType = attackProfile.weapon.damageType;\r\n  return actor.system.concepts[damageType] ? actor.system.concepts[damageType].weakness : 0;\r\n}\r\n\r\nasync function oold() {\r\n  let options = {};\r\n\r\n  // Ensure the options object is ready\r\n  options = foundry.utils.mergeObject({\r\n    configureDialog: true,\r\n    createMessage: true,\r\n    // \"flags.abbrew.use\": { type: this.type, itemId: this.id, itemUuid: this.uuid }\r\n  }, options);\r\n\r\n  const card = await displayCard(options, attack, attackProfile, actor);\r\n\r\n  return card;\r\n}\r\n\r\nasync function displayCard(options = {}, attack, attackProfile, actor) {\r\n\r\n  // Render the chat card template\r\n  const token = actor.token;\r\n  const templateData = {\r\n    actor: actor,\r\n    tokenId: token?.uuid || null,\r\n    item: this,\r\n    data: { attack, attackProfile },\r\n    labels: \"\",\r\n    hasAttack: true,\r\n    isHealing: false,\r\n    hasDamage: true,\r\n    isVersatile: false,\r\n    isSpell: false,\r\n    hasSave: false,\r\n    hasAreaTarget: false,\r\n    isTool: false,\r\n    hasAbilityCheck: false\r\n  };\r\n\r\n  // Handle passed data / don't look for item\r\n  const html = await renderTemplate(\"systems/abbrew/templates/chat/attack-card.hbs\", templateData);\r\n\r\n  // Create the ChatMessage data object\r\n  const chatData = {\r\n    user: game.user.id,\r\n    type: CONST.CHAT_MESSAGE_TYPES.OTHER,\r\n    content: html,\r\n    flavor: attack.name,\r\n    speaker: ChatMessage.getSpeaker({ actor: actor, token }),\r\n    flags: { \"core.canPopout\": true }\r\n  };\r\n\r\n  // If the Item was destroyed in the process of displaying its card - embed the item data in the chat message\r\n  //   if ( (this.type === \"consumable\") && !this.actor.items.has(this.id) ) {\r\n  //     chatData.flags[\"abbrew.itemData\"] = templateData.item.toObject();\r\n  //   }\r\n\r\n  // Merge in the flags from options\r\n  chatData.flags = foundry.utils.mergeObject(chatData.flags, options.flags);\r\n\r\n  /**\r\n   * A hook event that fires before an item chat card is created.\r\n   * @function abbrew.preDisplayCard\r\n   * @memberof hookEvents\r\n   * @param {Item5e} item             Item for which the chat card is being displayed.\r\n   * @param {object} chatData         Data used to create the chat message.\r\n   * @param {ItemUseOptions} options  Options which configure the display of the item chat card.\r\n   */\r\n  Hooks.callAll(\"abbrew.preDisplayCard\", this, chatData, options);\r\n\r\n  // Apply the roll mode to adjust message visibility\r\n  // ChatMessage.applyRollMode(chatData, options.rollMode ?? game.settings.get(\"core\", \"rollMode\"));\r\n\r\n  // const options = { createMessage: true };\r\n\r\n  // Create the Chat Message or return its data\r\n  const card = (options.createMessage !== false) ? await ChatMessage.create(chatData) : chatData;\r\n\r\n  /**\r\n   * A hook event that fires after an item chat card is created.\r\n   * @function abbrew.displayCard\r\n   * @memberof hookEvents\r\n   * @param {Item5e} item              Item for which the chat card is being displayed.\r\n   * @param {ChatMessage|object} card  The created ChatMessage instance or ChatMessageData depending on whether\r\n   *                                   options.createMessage was set to `true`.\r\n   */\r\n  Hooks.callAll(\"abbrew.displayCard\", this, card);\r\n\r\n  return card;\r\n}\r\n\r\nasync function onDamageAccept(event) {\r\n  console.log(event);\r\n  // Extract card data\r\n  const button = event.currentTarget;\r\n  const card = button.closest(\".chat-message\");\r\n  const messageId = card.closest(\".message\").dataset.messageId;\r\n  const message = game.messages.get(messageId);\r\n  const tokens = canvas.tokens.controlled.filter((token) => token.actor);\r\n  await tokens[0].actor.acceptDamage(message.rolls, message.flags.data);\r\n}\r\n\r\nexport async function onAttackCardAction(event) {\r\n  event.preventDefault();\r\n\r\n  // Extract card data\r\n  const button = event.currentTarget;\r\n  // Disable Button\r\n  button.disabled = true;\r\n  const card = button.closest(\".chat-card\");\r\n  const messageId = card.closest(\".message\").dataset.messageId;\r\n  const message = game.messages.get(messageId);\r\n  const action = button.dataset.action;\r\n\r\n  // Recover the actor for the chat card\r\n  const actor = await _getChatCardActor(card);\r\n  if (!actor) return;\r\n\r\n  // Validate permission to proceed with the roll\r\n  const isTargetted = action === \"contest\";\r\n  if (!(isTargetted || game.user.isGM || actor.isOwner)) {\r\n    return;\r\n  }\r\n\r\n  // Get the Item from stored flag data or by the item ID on the Actor\r\n  const storedData = message.getFlag(\"abbrew\", \"itemData\");\r\n  const item = storedData ? new this(storedData, { parent: actor }) : actor.attacks.get(card.dataset.itemId);\r\n  if (!item) {\r\n    const err = game.i18n.format(\"ABBREW.ActionWarningNoItem\", { item: card.dataset.itemId, name: actor.name });\r\n    return ui.notifications.error(err);\r\n  }\r\n\r\n  // TODO: Pull this up to the first dialog, we should pop the strong etc. one on\r\n  // clicking the sheet, not here. Give option to accept the damage only\r\n  await item.rollAttack({ event });\r\n\r\n  // Re-enable the button\r\n  button.disabled = false;\r\n}\r\n\r\n/**\r\n* Get the Actor which is the author of a chat card\r\n* @param {HTMLElement} card    The chat card being used\r\n* @returns {Actor|null}        The Actor document or null\r\n* @private\r\n*/\r\nasync function _getChatCardActor(card) {\r\n\r\n  // Case 1 - a synthetic actor from a Token\r\n  if (card.dataset.tokenId) {\r\n    const token = await fromUuid(card.dataset.tokenId);\r\n    if (!token) return null;\r\n    return token.actor;\r\n  }\r\n\r\n  // Case 2 - use Actor ID directory\r\n  const actorId = card.dataset.actorId;\r\n  return game.actors.get(actorId) || null;\r\n}","export class AbbrewRule {\r\n    id;\r\n    label;\r\n    type;\r\n    priority;\r\n    predicate;\r\n    // The property to modify e.g. system.abilities.strength.value\r\n    target;\r\n    source;\r\n    valid;\r\n\r\n    get _type() {\r\n        return this.type;\r\n    }\r\n\r\n    constructor(id, label, type, source, valid) {\r\n        this.type = type;\r\n        this.priority = 100;\r\n        this.id = id;\r\n        this.label = label;\r\n        this.valid = valid;\r\n        this.source = source;\r\n        this.predicate = \"\";\r\n        this.target = \"\";\r\n    }\r\n\r\n    template() { return JSON.stringify(this); };\r\n\r\n    static applyRule(rule, actorData) { return {}; }\r\n\r\n    static validate(candidate) {\r\n        return candidate.hasOwnProperty('type') && candidate.hasOwnProperty('priority') && candidate.hasOwnProperty('predicate') && candidate.hasOwnProperty('target');\r\n    }\r\n}\r\n\r\n","export const ABBREW = {};\r\n\r\n/**\r\n * The set of Ability Scores used within the sytem.\r\n * @type {Object}\r\n */\r\nABBREW.abilities = {\r\n  \"strength\": \"ABBREW.AbilityStrength\",\r\n  \"dexterity\": \"ABBREW.AbilityDexterity\",\r\n  \"constitution\": \"ABBREW.AbilityConstitution\",\r\n  \"agility\": \"ABBREW.AbilityAgility\",\r\n  \"intelligence\": \"ABBREW.AbilityIntelligence\",\r\n  \"will\": \"ABBREW.AbilityWill\",\r\n  \"wits\": \"ABBREW.AbilityWits\",\r\n  \"visualisation\": \"ABBREW.AbilityVisualisation\"\r\n};\r\n\r\nABBREW.abilityAbbreviations = {\r\n  \"str\": \"ABBREW.AbilityStrengthAbbreviation\",\r\n  \"dex\": \"ABBREW.AbilityDexterityAbbreviation\",\r\n  \"con\": \"ABBREW.AbilityConstitutionAbbreviation\",\r\n  \"agi\": \"ABBREW.AbilityAgilityAbbreviation\",\r\n  \"int\": \"ABBREW.AbilityIntelligenceAbbreviation\",\r\n  \"wll\": \"ABBREW.AbilityWillAbbreviation\",\r\n  \"wts\": \"ABBREW.AbilityWitsAbbreviation\",\r\n  \"wis\": \"ABBREW.AbilityVisualisationAbbreviation\"\r\n};\r\n\r\nABBREW.ActionTypes = {\r\n  \"Damage\": \"damage\"\r\n};\r\n\r\nABBREW.Reach = {\r\n  \"natural\": \"ABBREW.ReachNatural\",\r\n  \"short\": \"ABBREW.ReachShort\",\r\n  \"standard\": \"ABBREW.ReachStandard\",\r\n  \"long\": \"ABBREW.ReachLong\"\r\n}\r\n\r\nABBREW.DamageTypes = {\r\n  \"physical\": \"ABBREW.physical\",\r\n  \"crushing\": \"ABBREW.crushing\",\r\n  \"slashing\": \"ABBREW.slashing\",\r\n  \"piercing\": \"ABBREW.piercing\"\r\n};\r\n\r\nABBREW.DamageProjection = {\r\n  \"arc\": \"ABBREW.Arc\",\r\n  \"thrust\": \"ABBREW.Thrust\"\r\n}\r\n\r\nABBREW.UI = {\r\n  \"RuleElements\": {\r\n    \"Prompt\": {\r\n      \"NoValidOptions\": \"ABBREW.NoValidOptions\",\r\n      \"NoSelectionMade\": \"ABBREW.NoSelectionMade\"\r\n    }\r\n  }\r\n}\r\n\r\nABBREW.RuleTypes = {\r\n  \"ActiveEffect\": \"ABBREW.ActiveEffect\",\r\n  \"ChoiceSet\": \"ABBREW.ChoiceSet\"\r\n}","import { AbbrewRule } from \"./abbrew-rule.mjs\";\r\nimport { ABBREW } from \"../../helpers/config.mjs\";\r\n\r\nexport class AbbrewActiveEffect extends AbbrewRule {\r\n\r\n    operator;\r\n    value;\r\n\r\n    static validOperators =\r\n        [\r\n            \"override\",\r\n            \"add\",\r\n            \"minus\",\r\n            \"multiply\",\r\n            \"divide\",\r\n            \"upgrade\",\r\n            \"downgrade\"\r\n        ]\r\n\r\n    constructor(id, label, candidate, source, valid) {\r\n        super(id, label, ABBREW.RuleTypes.ActiveEffect, source, valid);\r\n        if (candidate && typeof candidate == \"object\") {\r\n            candidate && Object.assign(this, candidate);\r\n            return;\r\n        }\r\n        this.operator = \"\";\r\n        this.value = \"\";\r\n    }\r\n\r\n    static validate(candidate) {\r\n        return super.validate(candidate) && candidate.hasOwnProperty('operator') && candidate.hasOwnProperty('value') && this.validOperators.includes(candidate.operator) && !!candidate.value;\r\n    }\r\n\r\n    static applyRule(rule, actorData) {\r\n        let changes = {};\r\n        let targetElement = rule.targetElement ? actorData.items.get(rule.targetElement) : actorData;\r\n        let targetType = rule.targetElement ? \"Item\" : \"Actor\";\r\n        let currentValue = getProperty(targetElement, rule.target)\r\n        if (!currentValue) {\r\n            return changes;\r\n        }\r\n\r\n        // TODO:\r\n        // 1. Get Type here so that we can do string concats\r\n        let newValue = getProperty(targetElement, rule.target)\r\n        switch (rule.operator) {\r\n            case \"override\":\r\n                newValue = +rule.value;\r\n                break;\r\n            case \"add\":\r\n                newValue = newValue += +rule.value;\r\n                break;\r\n            case \"minus\":\r\n                newValue = newValue -= +rule.value;\r\n                break;\r\n            case \"multiply\":\r\n                newValue = newValue * +rule.value;\r\n                break;\r\n            case \"divide\":\r\n                const divisor = +rule.value !== 0 ? +rule.value : 1;\r\n                newValue = newValue / divisor;\r\n                break;\r\n            case \"upgrade\":\r\n                newValue = newValue < rule.value ? rule.value : newValue;\r\n                break;\r\n            case \"downgrade\":\r\n                newValue = newValue > rule.value ? rule.value : newValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (currentValue != newValue) {\r\n            const elementChanges = { [rule.target]: newValue, rules: [rule.id] };\r\n            let sourceValue = currentValue;\r\n            if (Object.keys(actorData.ruleOverrides).includes(rule.target)) {\r\n                sourceValue = actorData.ruleOverrides[rule.target].sourceValue;\r\n            }\r\n            changes = { target: rule.target, value: newValue, sourceValue, targetType, targetElement: rule.targetElement };\r\n            mergeObject(targetElement, elementChanges);\r\n        }\r\n\r\n        return changes;\r\n    }\r\n}","export class ChoiceSetPrompt extends Dialog {\r\n    selection;\r\n    choices;\r\n\r\n    constructor(data = { promptTitle, choices }, options = {}) {\r\n        options.buttons = {};\r\n        data.buttons = {};\r\n        super(data, options);\r\n        this.choices = data.content.choices;\r\n    }\r\n\r\n\r\n    /** @override */\r\n    get template() {\r\n        return \"systems/abbrew/templates/rules/choice-set-prompt.hbs\";\r\n    }\r\n\r\n    /** @override */\r\n    activateListeners($html) {\r\n        const html = $html[0];\r\n\r\n        html.querySelectorAll(\"a[data-choice], button[type=button]\").forEach((element) => {\r\n            element.addEventListener(\"click\", (event) => {\r\n                console.log('clicked');\r\n                // Get the actual selection\r\n                this.selection = event.currentTarget.dataset.id;\r\n                this.close();\r\n            });\r\n        });\r\n    }\r\n\r\n    getData() {\r\n        console.log(\"getData\", this);\r\n        // no super to Application\r\n        const data = super.getData();\r\n\r\n        data.header = this.data.header;\r\n        data.footer = this.data.footer;\r\n\r\n        data.choices = data.content.choices;\r\n        data.promptTitle = data.content.promptTitle;\r\n\r\n        console.log(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    /** Return early if there is only one choice */\r\n    async resolveSelection() {\r\n        // Exit early if there are no valid choices\r\n        if (this.choices.length === 0) {\r\n            await this.close({ force: true });\r\n            return null;\r\n        }\r\n\r\n        const firstChoice = this.choices.at(0);\r\n        if (firstChoice && this.choices.length === 1) {\r\n            return (this.selection = firstChoice[0]);\r\n        }\r\n\r\n        this.render(true);\r\n        return new Promise((resolve) => {\r\n            this.resolve = resolve;\r\n        });\r\n    }\r\n\r\n    /** @override */\r\n    /** Close the dialog, applying the effect with configured target or warning the user that something went wrong. */\r\n    async close({ force = false } = {}) {\r\n        this.element.find(\"button, select\").css({ pointerEvents: \"none\" });\r\n        if (!this.selection) {\r\n            if (force) {\r\n                ui.notifications.warn(\r\n                    game.i18n.format(\"ABBREW.UI.RuleElements.Prompt.NoValidOptions\", {\r\n                        actor: this.actor.name,\r\n                        item: this.item.name,\r\n                    })\r\n                );\r\n            } else if (!this.allowNoSelection) {\r\n                ui.notifications.warn(\r\n                    game.i18n.format(\"ABBREW.UI.RuleElements.Prompt.NoSelectionMade\")\r\n                );\r\n            }\r\n        }\r\n\r\n        this.resolve?.(this.selection);\r\n        await super.close({ force });\r\n    }\r\n}","import { AbbrewRule } from \"./abbrew-rule.mjs\";\r\nimport { ABBREW } from \"../../helpers/config.mjs\";\r\nimport { ChoiceSetPrompt } from \"../choice-set-prompt.mjs\";\r\n\r\nexport class AbbrewChoiceSet extends AbbrewRule {\r\n\r\n    options;\r\n    choice;\r\n\r\n    set target(target) {\r\n        this.target = target;\r\n    }\r\n\r\n    constructor(id, label, candidate, source, valid) {\r\n        super(id, label, ABBREW.RuleTypes.ChoiceSet, source, valid);\r\n        if (candidate && typeof candidate == \"object\") {\r\n            candidate && Object.assign(this, candidate);\r\n            return;\r\n        }\r\n        this.options = [\"weapon\", \"armour\", \"consumable\", \"anatomy\"];\r\n        this.choice = \"\";\r\n    }\r\n\r\n    static validate(candidate) {\r\n        return super.validate(candidate) && candidate.hasOwnProperty('options');\r\n    }\r\n\r\n    static async applyRule(rule, actorData) {\r\n        return {};\r\n    }\r\n\r\n    static async getChoice(rule, actorData) {\r\n        if (rule.choice) {\r\n            return rule.choice;\r\n        }\r\n\r\n        let choices = [];\r\n\r\n        if (rule.options.includes(\"weapon\")) {\r\n            choices = mergeObject(choices, this.getItemWeapons(actorData));\r\n        }\r\n\r\n        if (rule.options.includes(\"armour\")) {\r\n            choices = mergeObject(choices, this.getItemArmour(actorData));\r\n        }\r\n\r\n        if (rule.options.includes(\"consumable\")) {\r\n            choices = mergeObject(choices, this.getItemConsumable(actorData));\r\n        }\r\n\r\n        if (rule.options.includes(\"anatomy\")) {\r\n            choices = mergeObject(choices, this.getItemAnatomy(actorData));\r\n        }\r\n\r\n        const data = { content: { promptTitle: \"Hello\", choices }, buttons: {} };\r\n        const choice = await new ChoiceSetPrompt(data).resolveSelection();\r\n\r\n        let parentItemId = rule.source.item;\r\n        if (!rule.source.actor) {\r\n            parentItemId = actorData.items.map(i => i.system.rules).flat(1).filter(i => i.id == rule.id)[0].source.item;\r\n        }\r\n        const parentItem = actorData.items.get(parentItemId);\r\n        // const duplicateItem = deepClone(parentItem);\r\n        for (let i = 0; i < parentItem.system.rules.length; i++) {\r\n            parentItem.system.rules[i].targetElement = choice;\r\n            if (parentItem.system.rules[i].id == rule.id) {\r\n                parentItem.system.rules[i].choice = choice;\r\n                const ruleContent = parentItem.system.rules[i].content;\r\n                let parsedContent = JSON.parse(ruleContent);\r\n                parsedContent.choice = choice;\r\n                parentItem.system.rules[i].content = JSON.stringify(parsedContent);\r\n            }\r\n        }\r\n        parentItem.update({ system: { rules: parentItem.system.rules } });\r\n        return choice;\r\n    }\r\n\r\n    static getItemWeapons(actorData) {\r\n        return actorData.itemTypes.item.filter(i => i.system.isWeapon).map(i => ({ id: i._id, name: i.name }));\r\n    }\r\n\r\n    static getItemArmour(actorData) {\r\n        return actorData.itemTypes.item.filter(i => i.system.isArmour).map(i => ({ id: i._id, name: i.name }));\r\n    }\r\n\r\n    static getItemConsumable(actorData) {\r\n        return actorData.itemTypes.item.filter(i => i.system.isConsumable).map(i => ({ id: i._id, name: i.name }));\r\n    }\r\n\r\n    static getItemAnatomy(actorData) {\r\n        return actorData.itemTypes.anatomy.map(i => ({ id: i._id, name: i.name }));\r\n    }\r\n}","import { AbbrewActiveEffect } from \"./rules-data/active-effect.mjs\";\r\nimport { AbbrewChoiceSet } from \"./rules-data/choice-set.mjs\";\r\n\r\nexport class AbbrewRuleField {\r\n    id;\r\n    type;\r\n    label;\r\n    content;\r\n    source;\r\n    options;\r\n    targetElement;\r\n\r\n    constructor({ id, type, label, content, source }) {\r\n        this.id = id;\r\n        this.type = type;\r\n        // TODO: \r\n        // 1. Pass this through too.\r\n        this.label = label;\r\n        this.content = content;\r\n        this.source = source;\r\n        this.options = options;\r\n        this.targetElement = \"\";\r\n    }\r\n}\r\n\r\nexport const options = [\r\n    new AbbrewActiveEffect(),\r\n    new AbbrewChoiceSet()\r\n]\r\n\r\n","export class RuleSource {\r\n    actor;\r\n    item;\r\n    uuid;\r\n\r\n    constructor(uuid) {\r\n        this.uuid = uuid;\r\n        this.actor = \"\";\r\n        this.item = \"\";\r\n        const parts = uuid.split('.');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            if (parts[i] == \"Actor\") {\r\n                this.actor = parts[i + 1]\r\n            }\r\n            if (parts[i] == \"Item\") {\r\n                this.item = parts[i + 1];\r\n            }\r\n        }\r\n    }\r\n}","import { AbbrewRuleField, options } from \"./rule-field.mjs\";\r\nimport { AbbrewActiveEffect } from \"./rules-data/active-effect.mjs\";\r\nimport { AbbrewChoiceSet } from \"./rules-data/choice-set.mjs\";\r\nimport { ABBREW } from \"../helpers/config.mjs\";\r\nimport { AbbrewActor } from \"../documents/actor.mjs\";\r\nimport { AbbrewRule } from \"./rules-data/abbrew-rule.mjs\";\r\nimport { RuleSource } from \"./rule-source.mjs\";\r\n\r\n/**\r\n * Manage Rule instances through the Item Sheet via rule control buttons.\r\n * @param {MouseEvent} event      The left-click event on the rule control\r\n * @param {Item} item      The owning document which manages this rule\r\n */\r\nexport async function onManageRule(event, item) {\r\n    event.preventDefault();\r\n    const a = event.currentTarget;\r\n    const li = a.closest(\"li\");\r\n    const ruleId = li.dataset.ruleId;\r\n    let rules = foundry.utils.deepClone(item.system.rules);\r\n    switch (a.dataset.action) {\r\n        case \"create\":\r\n            const id = uuid();\r\n            rules = [new AbbrewRuleField({ id, type: 0, label: \"New Rule\", content: options[0].template(), source: new RuleSource(item.uuid) }),\r\n            ...rules,];\r\n            break;\r\n        case \"delete\":\r\n            rules = rules.filter(r => r.id != ruleId);\r\n            break;\r\n    }\r\n\r\n    return await item.update({\r\n        \"system.rules\": rules\r\n    });\r\n}\r\n\r\n/**\r\n * Provide UUID for rule instances\r\n * @returns UUID\r\n */\r\nfunction uuid() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n}\r\n\r\n/**\r\n * Prepare rules for the given actor from their items.\r\n * @param {AbbrewActor} actor \r\n */\r\nexport async function prepareRules(actor) {\r\n    const rules = actor.items._source.map(i => i.system.rules).flat(1);\r\n    const validRules = [];\r\n    const sourceTargets = [];\r\n    for (let i = 0; i < rules.length; i++) {\r\n        const rule = rules[i];\r\n        if (sourceTargets[rule.source.uuid]) {\r\n            rule.targetElement = sourceTargets[rule.source.uuid];\r\n        }\r\n        const parsedRule = JSON.parse(rule.content);\r\n        let typedRule = {};\r\n        let valid = false;\r\n        switch (parsedRule.type) {\r\n            case ABBREW.RuleTypes.ActiveEffect:\r\n                console.log('Active Effect');\r\n                valid = AbbrewActiveEffect.validate(parsedRule);\r\n                typedRule = new AbbrewActiveEffect(rule.id, rule.label, parsedRule, rule.source, valid);\r\n                typedRule.targetElement = rule.targetElement;\r\n                validRules.push(typedRule);\r\n                break;\r\n            case ABBREW.RuleTypes.ChoiceSet:\r\n                console.log('Choice Set');\r\n                valid = AbbrewChoiceSet.validate(parsedRule);\r\n                typedRule = new AbbrewChoiceSet(rule.id, rule.label, parsedRule, rule.source, valid);\r\n                const choice = await AbbrewChoiceSet.getChoice(typedRule, actor);\r\n                sourceTargets[rule.source.uuid] = choice;\r\n                typedRule.targetElement = choice;\r\n                typedRule.choice = choice;\r\n                validRules.push(typedRule);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    await actor.update({ \"system.rules\": validRules });\r\n}\r\n\r\n/**\r\n * Apply a rule to a given actor.\r\n * @param {AbbrewRule} rule \r\n * @param {AbbrewActor} actorData \r\n * @returns changes element.\r\n */\r\nexport function applyRule(rule, actorData) {\r\n    let changes = {};\r\n    switch (rule.type) {\r\n        case ABBREW.RuleTypes.ActiveEffect:\r\n            changes = AbbrewActiveEffect.applyRule(rule, actorData);\r\n            break;\r\n        case ABBREW.RuleTypes.ChoiceSet:\r\n            changes = AbbrewChoiceSet.applyRule(rule, actorData);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return changes;\r\n}\r\n","export function writeToPath(element, path, value) {    \r\n    let pathWrite = [];\r\n    pathWrite[path] = value;\r\n    let keyed = expandObject(pathWrite);\r\n    element.update(keyed);\r\n}","import { AbbrewAttackProfile } from \"./attackprofile.mjs\";\r\nimport { prepareRules, applyRule } from \"../rules/rules.mjs\";\r\nimport { writeToPath } from \"../helpers/write-to-path.mjs\";\r\n\r\n/**\r\n * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.\r\n * @extends {Actor}\r\n */\r\nexport class AbbrewActor extends Actor {\r\n  ruleOverrides;\r\n\r\n  /** @override */\r\n  prepareData() {\r\n    // Prepare data for the actor. Calling the super version of this executes\r\n    // the following, in order: data reset (to clear active effects),\r\n    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),\r\n    // prepareDerivedData().\r\n    console.log('before');\r\n    super.prepareData();\r\n    console.log('between');\r\n    console.log('after');\r\n  }\r\n\r\n  /** @override */\r\n  prepareBaseData() {\r\n    // Data modifications in this step occur before processing embedded\r\n    // documents or derived data.\r\n    console.log('is it before?');\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * Augment the basic actor data with additional dynamic data. Typically,\r\n   * you'll want to handle most of your calculated/derived data in this step.\r\n   * Data calculated in this step should generally not exist in template.json\r\n   * (such as ability modifiers rather than ability scores) and should be\r\n   * available both inside and outside of character sheets (such as if an actor\r\n   * is queried and has a roll executed directly from it).\r\n   */\r\n  prepareDerivedData() {\r\n    const actorData = this;\r\n    const systemData = actorData.system;\r\n    const flags = actorData.flags.abbrew || {};\r\n\r\n    // Make separate methods for each Actor type (character, npc, etc.) to keep\r\n    // things organized.\r\n    this._prepareCharacterData(actorData);\r\n    this._prepareNpcData(actorData);\r\n  }\r\n\r\n  /**\r\n   * Prepare Character type specific data\r\n   */\r\n  _prepareCharacterData(actorData) {\r\n    if (actorData.type !== 'character') return;\r\n\r\n    // Make modifications to data here. For example:\r\n    const systemData = actorData.system;\r\n    // super.applyActiveEffects()\r\n    // Prepare\r\n    this._processRules(this);\r\n    this._prepareAbilityModifiers(systemData);\r\n    this._prepareAnatomy(systemData);\r\n    this._prepareMovement(systemData);\r\n    this._prepareDefences(systemData);\r\n    this._prepareArmour(systemData);\r\n    this._preparePower(systemData);\r\n    this._prepareActions(systemData);\r\n    this._prepareFeatures(systemData);\r\n  }\r\n\r\n  async _updateObject(event, formData) {\r\n    console.log('here');\r\n    // call super with revert to rawActor merged with actual changes?\r\n    await super._updateObject(event, formData);\r\n  }\r\n\r\n  _onUpdate(data, options, userId) {\r\n    console.log('here2');\r\n    // call super with revert to rawActor merged with actual changes?\r\n    super._onUpdate(data, options, userId);\r\n\r\n  }\r\n\r\n  async _preUpdate(changed, options, user) {\r\n    console.log('pre-update');\r\n\r\n    if (this.ruleOverrides) {\r\n      let flatChanges = flattenObject(changed, 1);\r\n      let flatChangesArray = Object.keys(flatChanges).map((key) => [key, flatChanges[key]]);\r\n      const overrideKeys = Object.keys(this.ruleOverrides);\r\n      flatChangesArray.forEach(c => {\r\n        if (overrideKeys.includes(c[0]) && this.ruleOverrides[c[0]].overrideValue == c[1]) {\r\n          const path = c[0];\r\n          let keys = path.split('.');\r\n          let prop = keys.pop();\r\n          let parent = keys.reduce((obj, key) => obj[key], changed);\r\n          delete parent[prop];\r\n        }\r\n      })\r\n    }\r\n\r\n    super._preUpdate(changed, options, user);\r\n  }\r\n\r\n\r\n  _onUpdateEmbeddedDocuments(embeddedName, documents, result, options, userId) {\r\n    console.log(`Update Object: ${embeddedName}`);\r\n    super._onUpdateEmbeddedDocuments(embeddedName, documents, result, options, userId);\r\n  }\r\n\r\n  _processRules(actorData) {\r\n    this.prepareItems(this);\r\n    this.resetItems(this);\r\n    prepareRules(this);\r\n    if (actorData.system.rules.length == 0) {\r\n      this.ruleOverrides = [];\r\n      return;\r\n    }\r\n\r\n    let changes = [];\r\n    this.ruleOverrides = [];\r\n    actorData.ruleOverrides = [];\r\n    actorData.system.rules\r\n      .filter(\r\n        r => r.valid\r\n      ).sort((r1, r2) => r2.priority - r1.priority)\r\n      .forEach(r => {\r\n        const ruleChange = applyRule(r, actorData);\r\n        if (Object.keys(ruleChange).length == 0) {\r\n          return;\r\n        }\r\n        changes[ruleChange.target] = {\r\n          overrideValue: ruleChange.value,\r\n          sourceValue: ruleChange.sourceValue,\r\n          targetType: ruleChange.targetType,\r\n          targetElement: ruleChange.targetElement\r\n        };\r\n        actorData.ruleOverrides[ruleChange.target] = changes[ruleChange.target];\r\n      });\r\n\r\n    this.ruleOverrides = changes;\r\n  }\r\n\r\n  /**\r\n   * Reset item overridden fields to pre-rule values.\r\n   * @param {AbbrewActor} actorData    \r\n   */\r\n  prepareItems(actorData) {\r\n    actorData.items.filter(i => i.system.rules.length > 0).forEach(i => {\r\n      i.system.rules.forEach(r => {\r\n        if (r.source.actor && r.source.item) {\r\n          return;\r\n        }\r\n        r.source.actor = this.id;\r\n        r.source.item = i.id;\r\n        r.source.uuid = `Actor.${this.id}.Item.${i.id}`;\r\n      });\r\n      const item = actorData.items.get(i.id);\r\n      writeToPath(item,'system.rules', i.system.rules )\r\n    });\r\n  }\r\n\r\n  resetItems(actorData) {\r\n    if (!actorData.ruleOverrides) {\r\n      return;\r\n    }\r\n    for (const [key, override] of Object.entries(actorData.ruleOverrides)) {\r\n      if (override.targetType == \"Item\") {\r\n        const item = actorData.items.get(override.targetElement);\r\n        const path = key;\r\n        let keys = path.split('.');\r\n        let itemValue = keys.reduce((obj, key) => obj[key], item);\r\n        if (itemValue == override.overrideValue) {\r\n          writeToPath(item, path, override.sourceValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async _updateDocuments(documentClass, { updates, options, pack }, user) {\r\n    console.log('update-documents');\r\n    super._updateDocuments(documentClass, { updates, options, pack }, user);\r\n  }\r\n\r\n  _prepareAnatomy(systemData) {\r\n    this.itemTypes.anatomy.forEach(\r\n      a => {\r\n        const tags = a.system.tags.replace(' ', '').split(',');\r\n        a.system.tagsArray = tags;\r\n        const armourPoints = a.system.armourPoints.replace(' ', '').split(',');\r\n        a.system.armourPointsArray = armourPoints;\r\n      }\r\n    );\r\n    systemData.anatomy = this.itemTypes.anatomy;\r\n  }\r\n\r\n  _prepareDefences(systemData) {\r\n    const defences = Object.fromEntries(Object.entries(this.itemTypes.defence).map(([k, v]) => [v.name, v.system]));\r\n    systemData.defences = { ...systemData.defences, ...defences };\r\n  }\r\n\r\n  _prepareFeatures(systemData) {\r\n    const weapons = this._getWeapons();\r\n    const attacks = weapons.map(w => this._prepareWeaponAttack(w, systemData));\r\n    systemData.attacks = attacks.flat();\r\n  }\r\n\r\n  _getWeapons() {\r\n    return this._getItemWeapons().map(i => ({ \"name\": i.name, \"img\": i.img, \"weaponId\": i._id, \"weight\": i.system.weight, \"concepts\": i.system.concepts, \"material\": i.system.material, ...i.system.weapon }));\r\n  }\r\n\r\n  _getItemWeapons() {\r\n    return this.itemTypes.item.filter(i => i.system.isWeapon);\r\n  }\r\n\r\n  _prepareWeaponAttack(weapon) {\r\n    const results = weapon.weaponProfiles.split(',').map((wp, index) => {\r\n      const profileParts = wp.split('-');\r\n      const damageType = profileParts[0].replace(' ', '');\r\n      const attackType = profileParts[1];\r\n      // Handle Penalty here, check requirements are met.\r\n      const requirements = JSON.parse(weapon.requirements);\r\n      let damageBase = 0;\r\n      switch (profileParts[1]) {\r\n        case \"arc\":\r\n          damageBase = + weapon.material.structure + (requirements.strength.value * (1 + weapon.minimumEffectiveReach)) + (weapon.material.tier * 5);\r\n          break;\r\n        case \"thrust\":\r\n          damageBase = + weapon.material.structure + (weapon.material.tier * 5);\r\n          weapon.penetration = weapon.material.tier * 5;\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n\r\n      return new AbbrewAttackProfile(\r\n        index,\r\n        \"@system.abilities.strength.mod\",\r\n        damageBase,\r\n        true,\r\n        {\r\n          requirements: weapon.requirements,\r\n          reach: weapon.reach,\r\n          minimumEffectiveReach: weapon.minimumEffectiveReach,\r\n          focused: weapon.focused,\r\n          penetration: weapon.penetration,\r\n          traits: weapon.traits,\r\n          handsSupplied: weapon.handsSupplied,\r\n          handsRequired: weapon.handsRequired,\r\n          traitsArray: weapon.traitsArray,\r\n          criticalThreshold: weapon.criticalThreshold,\r\n          damageType: damageType,\r\n          attackType: attackType\r\n        },\r\n        false,\r\n        {}\r\n      );\r\n    });\r\n\r\n    return {\r\n      id: weapon.weaponId,\r\n      name: weapon.name,\r\n      image: weapon.img || \"icons/svg/sword.svg\",\r\n      isWeapon: true,\r\n      isEquipped: weapon.isEquipped,\r\n      profiles: results\r\n    }\r\n  };\r\n\r\n  async equipWeapon(id, equip) {\r\n    const updates = [];\r\n    updates.push({ _id: id, system: { weapon: { isEquipped: equip } } });\r\n    await this.updateEmbeddedDocuments(\"Item\", updates);\r\n  };\r\n\r\n  async equipArmour(id, equip) {\r\n    const updates = [];\r\n    updates.push({ _id: id, system: { armour: { isEquipped: equip } } });\r\n    await this.updateEmbeddedDocuments(\"Item\", updates);\r\n  }\r\n\r\n  _prepareAbilityModifiers(systemData) {\r\n    // Loop through ability scores, and add their modifiers to our sheet output.\r\n    for (let [key, ability] of Object.entries(systemData.abilities)) {\r\n      // Calculate the modifier using abbrew rules.\r\n      ability.mod = Math.floor(ability.value / 2);\r\n    }\r\n  }\r\n\r\n  _prepareMovement(systemData) {\r\n    const base = systemData.abilities.agility.mod;\r\n    const limbs = systemData.anatomy.filter(a => a.system.tagsArray.includes('primary')).length;\r\n    systemData.movement.base = base * limbs;\r\n  }\r\n\r\n  _prepareArmour(systemData) {\r\n    systemData.armours = this.itemTypes.item.filter(a => a.system.isArmour);\r\n    let naturalBonuses = this.itemTypes.anatomy.map(a => a.system.armourBonus);\r\n    const naturalValue = foundry.utils.getProperty(this, this.system.naturalArmour);\r\n    naturalBonuses = naturalBonuses.map(b => { if (b === 'natural') { b = naturalValue; } return b; });\r\n    const initialValue = 0;\r\n    const fullArmourMax = naturalBonuses.map(b => +b).reduce((accumulator, currentValue) => accumulator + currentValue, initialValue);\r\n    systemData.armour.max = fullArmourMax;\r\n\r\n    const defencesArray = systemData.armour.defences.replaceAll(' ', '').split(',');\r\n    systemData.armour.defencesArray = defencesArray;\r\n  }\r\n\r\n  _preparePower(systemData) {\r\n    const result = this._sumValues(systemData);\r\n    systemData.attributes.power.value = result;\r\n  }\r\n\r\n  _prepareActions(systemData) {\r\n    const actions = 3;\r\n    systemData.actions = { current: actions, maximum: actions };\r\n  }\r\n\r\n  // TODO: Generalise or change\r\n  _sumValues(systemData) {\r\n    return Object.values(systemData.abilities).reduce(function (sum, ability) {\r\n      return sum += ability.value;\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Prepare NPC type specific data.\r\n   */\r\n  _prepareNpcData(actorData) {\r\n    if (actorData.type !== 'npc') return;\r\n\r\n    // Make modifications to data here. For example:\r\n    const systemData = actorData.system;\r\n    systemData.xp = (systemData.cr * systemData.cr) * 100;\r\n  }\r\n\r\n  /**\r\n   * Override getRollData() that's supplied to rolls.\r\n   */\r\n  getRollData() {\r\n    const data = super.getRollData();\r\n\r\n    // Prepare character roll data.\r\n    this._getCharacterRollData(data);\r\n    this._getNpcRollData(data);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Prepare character roll data.\r\n   */\r\n  _getCharacterRollData(data) {\r\n    if (this.type !== 'character') return;\r\n\r\n    // Copy the ability scores to the top level, so that rolls can use\r\n    // formulas like `@str.mod + 4`.\r\n    if (data.abilities) {\r\n      for (let [k, v] of Object.entries(data.abilities)) {\r\n        data[k] = foundry.utils.deepClone(v);\r\n      }\r\n    }\r\n\r\n    // Add level for easier access, or fall back to 0.\r\n    if (data.attributes.level) {\r\n      data.lvl = data.attributes.level.value ?? 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepare NPC roll data.\r\n   */\r\n  _getNpcRollData(data) {\r\n    if (this.type !== 'npc') return;\r\n\r\n    // Process additional NPC data here.\r\n  }\r\n\r\n  async acceptDamage(damageRolls, attackData) {\r\n    // Gets targets\r\n    // [...(game.user.targets?.values() ?? [])].filter(t => !!t.actor)\r\n    const actor = this;\r\n    const systemData = this.system;\r\n    let damage = damageRolls[0]._total;\r\n    let damageRoll = damageRolls[0];\r\n    let damagePenetrate = attackData.attackProfile.weapon.penetration;\r\n    // const modRoll = damageRolls[0];\r\n    // modRoll.terms[0].rolls[0].terms[0].results[0] = {active: true, result: 1};\r\n    // const newRoll = await CONFIG.Dice.AbbrewRoll.fromRoll(modRoll);\r\n    let currentArmour = systemData.armour.value;\r\n    let newArmour = currentArmour;\r\n\r\n    const damageType = attackData.attackProfile.weapon.damageType;\r\n\r\n    if (!systemData.defences[damageType]) {\r\n      const untypedCritical = await this.getCriticalExplosions(damageRoll, 0, 0)\r\n      await this.handleDamage(systemData, damage, \"untyped\", untypedCritical);\r\n    }\r\n\r\n    const damageTypeDefence = systemData.defences[damageType];\r\n\r\n    if (damageTypeDefence.absorb) {\r\n      await this.absorbDamage(actor, systemData, damage);\r\n      return;\r\n    }\r\n    if (damageTypeDefence.immune) {\r\n      return;\r\n    }\r\n\r\n    if (damageTypeDefence.deflect && damageTypeDefence.conduct) {\r\n      // NOOP\r\n    }\r\n    else if (damageTypeDefence.deflect) {\r\n      damage = await this.deflectDamage(damageRoll);\r\n    }\r\n    else if (damageTypeDefence.conduct) {\r\n      damage = await this.conductDamage(damageRoll);\r\n    }\r\n\r\n    // TODO: Handle Resistance\r\n    // TODO: Handle Amplification\r\n\r\n    let criticalExplosions = await this.getCriticalExplosions(damageRoll, damageTypeDefence.vulnerable, damageTypeDefence.negate);\r\n\r\n    if (systemData.armour.defencesArray.includes(damageType)) {\r\n      const penetrate = damageTypeDefence.penetrate + damagePenetrate;\r\n\r\n      const armourAdjustment = damageTypeDefence.block - penetrate;\r\n\r\n      const fullDamage = damage;\r\n      const damageThroughArmour = currentArmour + armourAdjustment - damage;\r\n      if (damageThroughArmour < 0) {\r\n        damage = Math.min(Math.abs(damageThroughArmour), fullDamage);\r\n      } else {\r\n        damage = 0;\r\n      }\r\n\r\n      if (penetrate < currentArmour + damageTypeDefence.block) {\r\n        const availableArmour = currentArmour + armourAdjustment;\r\n        const damageToArmour = Math.min(availableArmour, fullDamage);\r\n        newArmour = currentArmour - damageToArmour;\r\n      } else {\r\n        newArmour = currentArmour;\r\n      }\r\n\r\n    }\r\n\r\n    let updates = {};\r\n    if (damage > 0) {\r\n      updates = await this.handleDamage(systemData, damage, damageType, criticalExplosions, attackData.attackProfile);\r\n    }\r\n\r\n    updates[\"system.armour.value\"] = newArmour;\r\n\r\n    await actor.update(updates);\r\n  }\r\n\r\n  async absorbDamage(actor, systemData, damage) {\r\n    let currentBlood = systemData.blood.value;\r\n    currentBlood = Math.min(currentBlood + damage, systemData.blood.fullMax);\r\n    const maxBlood = Math.max(currentBlood, systemData.blood.max);\r\n    await actor.update({ \"system.blood.value\": currentBlood, \"system.blood.max\": maxBlood });\r\n  }\r\n\r\n  async deflectDamage(damageRoll) {\r\n    const diceResults = damageRoll.terms[0].rolls[0].terms[0].results.reduce((a, b) => a + b.result, 0);\r\n    return damageRoll.total - diceResults;\r\n  }\r\n\r\n  async conductDamage(damageRoll) {\r\n    const diceResults = damageRoll.terms[0].rolls[0].terms[0].results.reduce((a, b) => a + b.result, 0);\r\n    const totalDice = damageRoll.terms[0].rolls[0].terms[0].results.length;\r\n    const maximiseDifference = (totalDice * 10) - diceResults;\r\n    return damageRoll.total + maximiseDifference;\r\n  }\r\n\r\n  async getCriticalExplosions(damageRoll, vulnerable, negate) {\r\n    const criticalThreshold = +damageRoll.terms[0].rolls[0].terms[0].modifiers[0].split('=')[1];\r\n    const criticalChecks = damageRoll.terms[0].rolls[0].terms[0].results.filter(r => r.result >= criticalThreshold).length;\r\n    return criticalChecks - negate + vulnerable;\r\n  }\r\n\r\n  async handleDamage(systemData, damage, damageType, criticalExplosions, attackProfile) {\r\n\r\n    if (damageType === \"heat\") {\r\n      return await this.handleHeat(systemData, damage, criticalExplosions, attackProfile);\r\n    }\r\n\r\n    if ([\"crushing\", \"slashing\", \"piercing\", \"untyped\"].includes(damageType)) {\r\n      return await this.handlePhysical(systemData, damage, criticalExplosions, attackProfile);\r\n    }\r\n  }\r\n\r\n  async handleHeat(systemData, damage, criticalExplosions, attackProfile) {\r\n    const healingWounds = systemData.wounds.healing += damage;\r\n    const thermalState = systemData.state += attackProfile.thermalChange;\r\n    // Can we add conditions automatically? would be good to add burned here...\r\n    const updates = { \"system.wounds.healing\": damage };\r\n    if (criticalExplosions) {\r\n      let currentBlood = systemData.blood.value -= damage;\r\n      let maxBlood = systemData.blood.max -= damage;\r\n      updates[\"system.blood.current\"] = currentBlood;\r\n      updates[\"system.blood.max\"] = maxBlood;\r\n    }\r\n    return updates;\r\n  }\r\n\r\n  async handlePhysical(systemData, damage, criticalExplosions, attackProfile) {\r\n    const updates = {};\r\n\r\n    if (systemData.canBleed) {\r\n      let activeWounds = systemData.wounds.active += damage;\r\n      updates[\"system.wounds.active\"] = activeWounds;\r\n    }\r\n\r\n    if (systemData.suffersPain) {\r\n      const pain = systemData.pain += damage;\r\n      updates[\"system.pain\"] = pain;\r\n    }\r\n\r\n    if (criticalExplosions) {\r\n      switch (attackProfile.weapon.damageType) {\r\n        case \"crushing\":\r\n          await this.handleCrushingCritical(updates, damage, criticalExplosions);\r\n          break;\r\n        case \"slashing\":\r\n          await this.handleSlashingCritical(updates, damage, criticalExplosions);\r\n          break;\r\n        case \"piercing\":\r\n          await this.handlePiercingCritical(updates, damage, criticalExplosions);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return updates;\r\n  }\r\n\r\n  async handleCrushingCritical(updates, damage, _) {\r\n    updates[\"system.conditions.sundered\"] = damage;\r\n  }\r\n\r\n  async handleSlashingCritical(updates, damage, _) {\r\n    updates[\"system.wounds.active\"] += damage;\r\n  }\r\n\r\n  async handlePiercingCritical(updates, _, criticalExplosions) {\r\n    updates[\"system.conditions.gushingWounds\"] = criticalExplosions;\r\n  }\r\n}","import { d10Roll } from \"../helpers/dice.mjs\";\r\n\r\n/**\r\n * Extend the basic Item with some very simple modifications.\r\n * @extends {Item}\r\n */\r\nexport class AbbrewItem extends Item {\r\n  /**\r\n   * Augment the basic Item data model with additional dynamic data.\r\n   */\r\n  prepareData() {\r\n    // As with the actor class, items are documents that can have their data\r\n    // preparation methods overridden (such as prepareBaseData()).\r\n    super.prepareData();\r\n  }\r\n\r\n  /**\r\n   * Prepare a data object which is passed to any Roll formulas which are created related to this Item\r\n   * @private\r\n   */\r\n  getRollData() {\r\n    // If present, return the actor's roll data.\r\n    if (!this.actor) return null;\r\n    const rollData = this.actor.getRollData();\r\n    // Grab the item's system data as well.\r\n    rollData.item = foundry.utils.deepClone(this.system);\r\n\r\n    return rollData;\r\n  }\r\n\r\n  /**\r\n   * Handle clickable rolls.\r\n   * @param {Event} event   The originating click event\r\n   * @private\r\n   */\r\n  async roll() {\r\n    const item = this;\r\n\r\n    // Initialize chat data.\r\n    const speaker = ChatMessage.getSpeaker({ actor: this.actor });\r\n    const rollMode = game.settings.get('core', 'rollMode');\r\n    const label = `[${item.type}] ${item.name}`;\r\n\r\n    // If there's no roll data, send a chat message.\r\n    if (!this.system.formula) {\r\n      ChatMessage.create({\r\n        speaker: speaker,\r\n        rollMode: rollMode,\r\n        flavor: label,\r\n        content: item.system.description ?? ''\r\n      });\r\n    }\r\n    // Otherwise, create a roll and send a chat message from it.\r\n    else {\r\n      // Retrieve roll data.\r\n      const rollData = this.getRollData();\r\n\r\n      // Invoke the roll and submit it to chat.\r\n      const roll = new Roll(rollData.item.formula, rollData);\r\n      // If you need to store the value first, uncomment the next line.\r\n      // let result = await roll.roll({async: true});\r\n      roll.toMessage({\r\n        speaker: speaker,\r\n        rollMode: rollMode,\r\n        flavor: label,\r\n      });\r\n      return roll;\r\n    }\r\n  }\r\n\r\n  async use(config = {}, options = {}) {\r\n    let item = this;\r\n    const is = item.system;\r\n    const as = item.actor.system;\r\n\r\n    // Ensure the options object is ready\r\n    options = foundry.utils.mergeObject({\r\n      configureDialog: true,\r\n      createMessage: true,\r\n      \"flags.abbrew.use\": { type: this.type, itemId: this.id, itemUuid: this.uuid }\r\n    }, options);\r\n\r\n    const card = await this.displayCard(options);\r\n\r\n    return card;\r\n  }\r\n\r\n  async displayCard(options = {}) {\r\n\r\n    // Render the chat card template\r\n    const token = this.actor.token;\r\n    const templateData = {\r\n      actor: this.actor,\r\n      tokenId: token?.uuid || null,\r\n      item: this,\r\n      data: await this.getChatData(),\r\n      labels: this.labels,\r\n      hasAttack: this.hasAttack,\r\n      isHealing: this.isHealing,\r\n      hasDamage: this.hasDamage,\r\n      isVersatile: this.isVersatile,\r\n      isSpell: this.type === \"spell\",\r\n      hasSave: this.hasSave,\r\n      hasAreaTarget: this.hasAreaTarget,\r\n      isTool: this.type === \"tool\",\r\n      hasAbilityCheck: this.hasAbilityCheck\r\n    };\r\n\r\n    const html = await renderTemplate(\"systems/abbrew/templates/chat/item-card.hbs\", templateData);\r\n\r\n    // Create the ChatMessage data object\r\n    const chatData = {\r\n      user: game.user.id,\r\n      type: CONST.CHAT_MESSAGE_TYPES.OTHER,\r\n      content: html,\r\n      flavor: this.name,\r\n      speaker: ChatMessage.getSpeaker({ actor: this.actor, token }),\r\n      flags: { \"core.canPopout\": true }\r\n    };\r\n\r\n    // If the Item was destroyed in the process of displaying its card - embed the item data in the chat message\r\n    //   if ( (this.type === \"consumable\") && !this.actor.items.has(this.id) ) {\r\n    //     chatData.flags[\"abbrew.itemData\"] = templateData.item.toObject();\r\n    //   }\r\n\r\n    // Merge in the flags from options\r\n    chatData.flags = foundry.utils.mergeObject(chatData.flags, options.flags);\r\n\r\n    /**\r\n     * A hook event that fires before an item chat card is created.\r\n     * @function abbrew.preDisplayCard\r\n     * @memberof hookEvents\r\n     * @param {Item5e} item             Item for which the chat card is being displayed.\r\n     * @param {object} chatData         Data used to create the chat message.\r\n     * @param {ItemUseOptions} options  Options which configure the display of the item chat card.\r\n     */\r\n    Hooks.callAll(\"abbrew.preDisplayCard\", this, chatData, options);\r\n\r\n    // Apply the roll mode to adjust message visibility\r\n    // ChatMessage.applyRollMode(chatData, options.rollMode ?? game.settings.get(\"core\", \"rollMode\"));\r\n\r\n    // const options = { createMessage: true };\r\n\r\n    // Create the Chat Message or return its data\r\n    const card = (options.createMessage !== false) ? await ChatMessage.create(chatData) : chatData;\r\n\r\n    /**\r\n     * A hook event that fires after an item chat card is created.\r\n     * @function abbrew.displayCard\r\n     * @memberof hookEvents\r\n     * @param {Item5e} item              Item for which the chat card is being displayed.\r\n     * @param {ChatMessage|object} card  The created ChatMessage instance or ChatMessageData depending on whether\r\n     *                                   options.createMessage was set to `true`.\r\n     */\r\n    Hooks.callAll(\"abbrew.displayCard\", this, card);\r\n\r\n    return card;\r\n  }\r\n\r\n  async getChatData(htmlOptions = {}) {\r\n    const data = this.toObject().system;\r\n    const labels = this.labels;\r\n\r\n    // Rich text description\r\n    data.description = await TextEditor.enrichHTML(data.description, {\r\n      async: true,\r\n      relativeTo: this,\r\n      rollData: this.getRollData(),\r\n      ...htmlOptions\r\n    });\r\n\r\n    // Item type specific properties\r\n    const props = [];\r\n    // switch ( this.type ) {\r\n    //   case \"consumable\":\r\n    //     this._consumableChatData(data, labels, props); break;\r\n    //   case \"equipment\":\r\n    //     this._equipmentChatData(data, labels, props); break;\r\n    //   case \"feat\":\r\n    //     this._featChatData(data, labels, props); break;\r\n    //   case \"loot\":\r\n    //     this._lootChatData(data, labels, props); break;\r\n    //   case \"spell\":\r\n    //     this._spellChatData(data, labels, props); break;\r\n    //   case \"tool\":\r\n    //     this._toolChatData(data, labels, props); break;\r\n    //   case \"weapon\":\r\n    //     this._weaponChatData(data, labels, props); break;\r\n    // }\r\n\r\n    // // Equipment properties\r\n    // if ( data.hasOwnProperty(\"equipped\") && ![\"loot\", \"tool\"].includes(this.type) ) {\r\n    //   if ( data.attunement === CONFIG.DND5E.attunementTypes.REQUIRED ) {\r\n    //     props.push(CONFIG.DND5E.attunements[CONFIG.DND5E.attunementTypes.REQUIRED]);\r\n    //   }\r\n    //   props.push(\r\n    //     game.i18n.localize(data.equipped ? \"DND5E.Equipped\" : \"DND5E.Unequipped\"),\r\n    //     game.i18n.localize(data.proficient ? \"DND5E.Proficient\" : \"DND5E.NotProficient\")\r\n    //   );\r\n    // }\r\n\r\n    // // Ability activation properties\r\n    // if ( data.hasOwnProperty(\"activation\") ) {\r\n    //   props.push(\r\n    //     labels.activation + (data.activation?.condition ? ` (${data.activation.condition})` : \"\"),\r\n    //     labels.target,\r\n    //     labels.range,\r\n    //     labels.duration\r\n    //   );\r\n    // }\r\n\r\n    // Filter properties and return\r\n    data.properties = props.filter(p => !!p);\r\n    return data;\r\n  }\r\n\r\n  /* -------------------------------------------- */\r\n  /*  Chat Message Helpers                        */\r\n  /* -------------------------------------------- */\r\n\r\n  /**\r\n   * Apply listeners to chat messages.\r\n   * @param {HTML} html  Rendered chat message.\r\n   */\r\n  static chatListeners(html) {\r\n    html.on(\"click\", \".card-buttons button\", this._onChatCardAction.bind(this));\r\n    html.on(\"click\", \".item-name\", this._onChatCardToggleContent.bind(this));\r\n  }\r\n\r\n  static async _onChatCardAction(event) {\r\n    event.preventDefault();\r\n\r\n    // Extract card data\r\n    const button = event.currentTarget;\r\n    // Disable Button\r\n    button.disabled = true;\r\n    const card = button.closest(\".chat-card\");\r\n    const messageId = card.closest(\".message\").dataset.messageId;\r\n    const message = game.messages.get(messageId);\r\n    const action = button.dataset.action;\r\n\r\n    // Recover the actor for the chat card\r\n    const actor = await this._getChatCardActor(card);\r\n    if (!actor) return;\r\n\r\n    // Validate permission to proceed with the roll\r\n    const isTargetted = action === \"contest\";\r\n    if (!(isTargetted || game.user.isGM || actor.isOwner)) {\r\n      return;\r\n    }\r\n\r\n    // Get the Item from stored flag data or by the item ID on the Actor\r\n    const storedData = message.getFlag(\"abbrew\", \"itemData\");\r\n    const item = storedData ? new this(storedData, { parent: actor }) : actor.items.get(card.dataset.itemId);\r\n    if (!item) {\r\n      const err = game.i18n.format(\"ABBREW.ActionWarningNoItem\", { item: card.dataset.itemId, name: actor.name });\r\n      return ui.notifications.error(err);\r\n    }\r\n\r\n    await item.rollAttack({ event });\r\n\r\n    // Re-enable the button\r\n    button.disabled = false;\r\n  }\r\n\r\n  async rollAttack(options = {}) {\r\n\r\n    const { rollData, parts } = this.getAttack();\r\n\r\n    let title = `${this.name} - ${game.i18n.localize(\"ABBREW.AttackRoll\")}`;\r\n\r\n    // HERE: Look at skill rolls in 5e\r\n    // TODO: FUCKER WAS COMING FROM HERE\r\n    rollData.mod = 10;\r\n\r\n    // Compose roll options\r\n    const rollConfig = foundry.utils.mergeObject({\r\n      actor: this.actor,\r\n      data: rollData,\r\n      critical: this.getCriticalThreshold(),\r\n      title,\r\n      flavor: title,\r\n      dialogOptions: {\r\n        width: 400,\r\n        top: options.event ? options.event.clientY - 80 : null,\r\n        left: window.innerWidth - 710\r\n      },\r\n      messageData: {\r\n        \"flags.abbrew.roll\": { type: \"attack\", itemId: this.id, itemUuid: this.uuid },\r\n        speaker: ChatMessage.getSpeaker({ actor: this.actor })\r\n      }\r\n    }, options);\r\n    rollConfig.parts = parts.concat(options.parts ?? []);\r\n\r\n    const roll = await d10Roll(rollConfig);\r\n\r\n    return roll;\r\n\r\n  }\r\n\r\n  // TODO: Allow to change\r\n  getCriticalThreshold() {\r\n    return 10;\r\n  }\r\n\r\n  // TODO: Check this is needed\r\n  getAttack() {\r\n    const rollData = this.getRollData();\r\n    const parts = [];\r\n    return { rollData, parts };\r\n  }\r\n\r\n  async update(data = {}, context = {}) {\r\n    console.log('update item');\r\n    super.update(data, context);\r\n  }\r\n\r\n  /**\r\n   * Handle toggling the visibility of chat card content when the name is clicked\r\n   * @param {Event} event   The originating click event\r\n   * @private\r\n   */\r\n  static _onChatCardToggleContent(event) {\r\n    event.preventDefault();\r\n    const header = event.currentTarget;\r\n    const card = header.closest(\".chat-card\");\r\n    const content = card.querySelector(\".card-content\");\r\n    content.style.display = content.style.display === \"none\" ? \"block\" : \"none\";\r\n  }\r\n\r\n  /**\r\n * Get the Actor which is the author of a chat card\r\n * @param {HTMLElement} card    The chat card being used\r\n * @returns {Actor|null}        The Actor document or null\r\n * @private\r\n */\r\n  static async _getChatCardActor(card) {\r\n\r\n    // Case 1 - a synthetic actor from a Token\r\n    if (card.dataset.tokenId) {\r\n      const token = await fromUuid(card.dataset.tokenId);\r\n      if (!token) return null;\r\n      return token.actor;\r\n    }\r\n\r\n    // Case 2 - use Actor ID directory\r\n    const actorId = card.dataset.actorId;\r\n    return game.actors.get(actorId) || null;\r\n  }\r\n\r\n  /**\r\n   * Get the Actor which is the author of a chat card\r\n   * @param {HTMLElement} card    The chat card being used\r\n   * @returns {Actor[]}            An Array of Actor documents, if any\r\n   * @private\r\n   */\r\n  static _getChatCardTargets(card) {\r\n    let targets = canvas.tokens.controlled.filter(t => !!t.actor);\r\n    if (!targets.length && game.user.character) targets = targets.concat(game.user.character.getActiveTokens());\r\n    if (!targets.length) ui.notifications.warn(game.i18n.localize(\"DND5E.ActionWarningNoToken\"));\r\n    return targets;\r\n  }\r\n}\r\n","export async function ChatAbbrew(dataset, element, actor) {\r\n    return;\r\n\r\n    const itemId = element.closest('.item').dataset.itemId;\r\n    const item = actor.items.get(itemId);\r\n\r\n    const templateData = {\r\n        actor,\r\n        item,\r\n        dataset,\r\n        description: item.system.description\r\n    };\r\n\r\n    const html = await renderTemplate(\"systems/abbrew/templates/chat/item-card.hbs\", templateData);\r\n\r\n    // Create the ChatMessage data object\r\n    const chatData = {\r\n        user: game.user.id,\r\n        type: CONST.CHAT_MESSAGE_TYPES.OTHER,\r\n        content: html,\r\n        flavor: item.name,\r\n        speaker: ChatMessage.getSpeaker({ actor, token: actor.token }),\r\n        flags: { \"core.canPopout\": true }\r\n    };\r\n\r\n    // If the Item was destroyed in the process of displaying its card - embed the item data in the chat message\r\n    //   if ( (this.type === \"consumable\") && !this.actor.items.has(this.id) ) {\r\n    //     chatData.flags[\"abbrew.itemData\"] = templateData.item.toObject();\r\n    //   }\r\n\r\n    // Merge in the flags from options\r\n    // chatData.flags = foundry.utils.mergeObject(chatData.flags, options.flags); \r\n\r\n    /**\r\n     * A hook event that fires before an item chat card is created.\r\n     * @function abbrew.preDisplayCard\r\n     * @memberof hookEvents\r\n     * @param {Item5e} item             Item for which the chat card is being displayed.\r\n     * @param {object} chatData         Data used to create the chat message.\r\n     * @param {ItemUseOptions} options  Options which configure the display of the item chat card.\r\n     */\r\n    // Hooks.callAll(\"abbrew.preDisplayCard\", this, chatData, options);\r\n\r\n    // Apply the roll mode to adjust message visibility\r\n    // ChatMessage.applyRollMode(chatData, options.rollMode ?? game.settings.get(\"core\", \"rollMode\"));\r\n\r\n    const options = { createMessage: true };\r\n\r\n    // Create the Chat Message or return its data\r\n    const card = (options.createMessage !== false) ? await ChatMessage.create(chatData) : chatData;\r\n\r\n    /**\r\n     * A hook event that fires after an item chat card is created.\r\n     * @function abbrew.displayCard\r\n     * @memberof hookEvents\r\n     * @param {Item5e} item              Item for which the chat card is being displayed.\r\n     * @param {ChatMessage|object} card  The created ChatMessage instance or ChatMessageData depending on whether\r\n     *                                   options.createMessage was set to `true`.\r\n     */\r\n    Hooks.callAll(\"abbrew.displayCard\", this, card);\r\n\r\n    return card;\r\n}","/**\r\n * Manage Active Effect instances through the Actor Sheet via effect control buttons.\r\n * @param {MouseEvent} event      The left-click event on the effect control\r\n * @param {Actor|Item} owner      The owning document which manages this effect\r\n */\r\n export function onManageActiveEffect(event, owner) {\r\n  event.preventDefault();\r\n  const a = event.currentTarget;\r\n  const li = a.closest(\"li\");\r\n  const effect = li.dataset.effectId ? owner.effects.get(li.dataset.effectId) : null;\r\n  switch ( a.dataset.action ) {\r\n    case \"create\":\r\n      return owner.createEmbeddedDocuments(\"ActiveEffect\", [{\r\n        label: \"New Effect\",\r\n        icon: \"icons/svg/aura.svg\",\r\n        source: owner.uuid,\r\n        \"duration.rounds\": li.dataset.effectType === \"temporary\" ? 1 : undefined,\r\n        disabled: li.dataset.effectType === \"inactive\"\r\n      }]);\r\n    case \"edit\":\r\n      return effect.sheet.render(true);\r\n    case \"delete\":\r\n      return effect.delete();\r\n    case \"toggle\":\r\n      return effect.update({disabled: !effect.disabled});\r\n  }\r\n}\r\n\r\n/**\r\n * Prepare the data structure for Active Effects which are currently applied to an Actor or Item.\r\n * @param {ActiveEffect[]} effects    The array of Active Effect instances to prepare sheet data for\r\n * @return {object}                   Data for rendering\r\n */\r\nexport function prepareActiveEffectCategories(effects) {\r\n\r\n    // Define effect header categories\r\n    const categories = {\r\n      temporary: {\r\n        type: \"temporary\",\r\n        label: \"Temporary Effects\",\r\n        effects: []\r\n      },\r\n      passive: {\r\n        type: \"passive\",\r\n        label: \"Passive Effects\",\r\n        effects: []\r\n      },\r\n      inactive: {\r\n        type: \"inactive\",\r\n        label: \"Inactive Effects\",\r\n        effects: []\r\n      }\r\n    };\r\n\r\n    // Iterate over active effects, classifying them into categories\r\n    for ( let e of effects ) {\r\n      e._getSourceName(); // Trigger a lookup for the source name\r\n      if ( e.disabled ) categories.inactive.effects.push(e);\r\n      else if ( e.isTemporary ) categories.temporary.effects.push(e);\r\n      else categories.passive.effects.push(e);\r\n    }\r\n    return categories;\r\n}","import { useAttack, onAttackCardAction } from \"../documents/attackprofile.mjs\";\r\nimport { ChatAbbrew } from \"../helpers/chat.mjs\";\r\nimport { onManageActiveEffect, prepareActiveEffectCategories } from \"../helpers/effects.mjs\";\r\n\r\n/**\r\n * Extend the basic ActorSheet\r\n * @extends {ActorSheet}\r\n */\r\nexport class AbbrewActorSheet extends ActorSheet {\r\n\r\n  /** @override */\r\n  static get defaultOptions() {\r\n    return mergeObject(super.defaultOptions, {\r\n      classes: [\"abbrew\", \"sheet\", \"actor\"],\r\n      template: \"systems/abbrew/templates/actor/actor-sheet.hbs\",\r\n      width: 600,\r\n      height: 600,\r\n      tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"features\" }]\r\n    });\r\n  }\r\n\r\n  /** @override */\r\n  get template() {\r\n    return `systems/abbrew/templates/actor/actor-${this.actor.type}-sheet.hbs`;\r\n  }\r\n\r\n  /* -------------------------------------------- */\r\n\r\n  /** @override */\r\n  getData() {\r\n    // Retrieve the data structure from the base sheet. You can inspect or log\r\n    // the context variable to see the structure, but some key properties for\r\n    // sheets are the actor object, the data object, whether or not it's\r\n    // editable, the items array, and the effects array.\r\n    const context = super.getData();\r\n\r\n    // Use a safe clone of the actor data for further operations.\r\n    const actorData = this.actor.toObject(false);\r\n\r\n    // Add the actor's data to context.data for easier access, as well as flags.\r\n    context.system = actorData.system;\r\n    context.flags = actorData.flags;\r\n\r\n    // Prepare character data and items.\r\n    if (actorData.type == 'character') {\r\n      this._prepareItems(context);\r\n      this._prepareCharacterData(context);\r\n      this._prepareAttacks(context);\r\n      this._prepareArmours(context);\r\n      context.displayConditions  = actorData.system.displayConditions;\r\n    }\r\n\r\n    // Prepare NPC data and items.\r\n    if (actorData.type == 'npc') {\r\n      this._prepareItems(context);\r\n    }\r\n\r\n    // Add roll data for TinyMCE editors.\r\n    context.rollData = context.actor.getRollData();\r\n\r\n    // Prepare active effects\r\n    context.effects = prepareActiveEffectCategories(this.actor.effects);\r\n\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * Organize and classify Items for Character sheets.\r\n   *\r\n   * @param {Object} actorData The actor to prepare.\r\n   *\r\n   * @return {undefined}\r\n   */\r\n  _prepareCharacterData(context) {\r\n    // Handle ability scores.\r\n    for (let [k, v] of Object.entries(context.system.abilities)) {\r\n      v.label = game.i18n.localize(CONFIG.ABBREW.abilities[k]) ?? k;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Organize and classify Items for Character sheets.\r\n   *\r\n   * @param {Object} actorData The actor to prepare.\r\n   *\r\n   * @return {undefined}\r\n   */\r\n  _prepareItems(context) {\r\n    // Initialize containers.\r\n    const anatomy = [];\r\n    const resources = [];\r\n    const abilities = [];\r\n    const gear = [];\r\n    const features = [];\r\n    const spells = {\r\n      0: [],\r\n      1: [],\r\n      2: [],\r\n      3: [],\r\n      4: [],\r\n      5: [],\r\n      6: [],\r\n      7: [],\r\n      8: [],\r\n      9: []\r\n    };\r\n\r\n    // Iterate through items, allocating to containers\r\n    for (let i of context.items) {\r\n      i.img = i.img || DEFAULT_TOKEN;\r\n      // Append to resources.\r\n      if (i.type === 'anatomy') {\r\n        anatomy.push(i);\r\n      }\r\n      // Append to resources.\r\n      else if (i.type === 'resource') {\r\n        resources.push(i);\r\n      }\r\n      // Append to gear.\r\n      else if (i.type === 'item') {\r\n        gear.push(i);\r\n      }\r\n      // Append to features.\r\n      else if (i.type === 'feature') {\r\n        features.push(i);\r\n      }\r\n      // Append to Abilities\r\n      else if (i.type === 'ability') {\r\n        abilities.push(i);\r\n      }\r\n      // Append to spells.\r\n      else if (i.type === 'spell') {\r\n        if (i.system.spellLevel != undefined) {\r\n          spells[i.system.spellLevel].push(i);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Assign and return\r\n    // ABDOC: name here in context used in hbs to pull values\r\n    context.resource = resources;\r\n    context.gear = gear;\r\n    context.features = features;\r\n    context.spells = spells;\r\n    context.anatomy = anatomy;\r\n    context.ability = abilities;\r\n  }\r\n\r\n  /* -------------------------------------------- */\r\n\r\n  _prepareAttacks(context) {\r\n    context.attacks = context.system.attacks;\r\n  }\r\n\r\n  /* -------------------------------------------- */\r\n\r\n  _prepareArmours(context) {\r\n    context.armours = context.system.armours;\r\n  }\r\n\r\n\r\n  /* -------------------------------------------- */\r\n\r\n  /** @override */\r\n  activateListeners(html) {\r\n    super.activateListeners(html);\r\n\r\n    // Render the item sheet for viewing/editing prior to the editable check.\r\n    html.find('.item-edit').click(ev => {\r\n      const li = $(ev.currentTarget).parents(\".item\");\r\n      const item = this.actor.items.get(li.data(\"itemId\"));\r\n      item.sheet.render(true);\r\n    });\r\n\r\n    // -------------------------------------------------------------\r\n    // Everything below here is only needed if the sheet is editable\r\n    if (!this.isEditable) return;\r\n\r\n    // Show/Hide Conditions\r\n    html.find('.conditions-header').click(async ev => {\r\n      const context = super.getData();\r\n      await this.actor.update({\"system.displayConditions\": !this.actor.system.displayConditions});\r\n    });\r\n\r\n    // Add Inventory Item\r\n    html.find('.item-create').click(this._onItemCreate.bind(this));\r\n\r\n    // Delete Inventory Item\r\n    html.find('.item-delete').click(ev => {\r\n      const li = $(ev.currentTarget).parents(\".item\");\r\n      const item = this.actor.items.get(li.data(\"itemId\"));\r\n      item.delete();\r\n      li.slideUp(200, () => this.render(false));\r\n    });\r\n\r\n    // Active Effect management\r\n    html.find(\".effect-control\").click(ev => onManageActiveEffect(ev, this.actor));\r\n\r\n    // Rollable abilities.\r\n    html.find('.rollable .item-image').click(this._onItemUse.bind(this));\r\n\r\n    // attacks\r\n    html.find('.equip-weapon').click(this._equipWeapon.bind(this));\r\n    html.find('.rollable.attack').click(this._onAttackUse.bind(this));\r\n\r\n    // armour\r\n    html.find('.equip-armour').click(this._equipArmour.bind(this));    \r\n\r\n    // Drag events for macros.\r\n    if (this.actor.isOwner) {\r\n      let handler = ev => this._onDragStart(ev);\r\n      html.find('li.item').each((i, li) => {\r\n        if (li.classList.contains(\"inventory-header\")) return;\r\n        li.setAttribute(\"draggable\", true);\r\n        li.addEventListener(\"dragstart\", handler, false);\r\n      });\r\n    }\r\n  }\r\n\r\n  async _equipWeapon(event) {\r\n    event.preventDefault();\r\n    const dataSet = event.target.dataset\r\n    const weaponId = dataSet.weaponid;\r\n    const equip = dataSet.equip === \"true\";\r\n    await this.actor.equipWeapon(weaponId, equip)\r\n  }\r\n\r\n  async _equipArmour(event) {\r\n    event.preventDefault();\r\n    const dataSet = event.target.dataset\r\n    const armourId = dataSet.armourid;\r\n    const equip = dataSet.equip === \"true\";\r\n    await this.actor.equipArmour(armourId, equip)\r\n  }\r\n\r\n  /**\r\n   * Handle creating a new Owned Item for the actor using initial data defined in the HTML dataset\r\n   * @param {Event} event   The originating click event\r\n   * @private\r\n   */\r\n  async _onItemCreate(event) {\r\n    event.preventDefault();\r\n    const header = event.currentTarget;\r\n    const type = header.dataset.type;\r\n\r\n    // Check to make sure the newly created class doesn't take player over level cap\r\n    if (type === \"ability\" && (this.actor.system.IP.current + 1 > this.actor.system.IP.total)) {\r\n      const err = game.i18n.format(\"ABBREW.InspirationPointsExceededWarn\", { max: this.actor.system.IP.total });\r\n      return ui.notifications.error(err);\r\n    }\r\n\r\n    const itemData = {\r\n      name: game.i18n.format(\"ABBREW.ItemNew\", { type: game.i18n.localize(`ITEM.Type${type.capitalize()}`) }),\r\n      type: type,\r\n      system: { ...header.dataset.type }\r\n    };\r\n    delete itemData.system.type;\r\n\r\n    return this.actor.createEmbeddedDocuments(\"Item\", [itemData]);\r\n  }\r\n\r\n  /**\r\n   * Handle clickable rolls.\r\n   * @param {Event} event   The originating click event\r\n   * @private\r\n   */\r\n  async _onItemUse(event) {\r\n    event.preventDefault();\r\n    const element = event.currentTarget;\r\n    const dataset = element.dataset;\r\n    const actor = this.actor;\r\n    ChatAbbrew(dataset, element, actor);\r\n    const itemId = event.currentTarget.closest(\".item\").dataset.itemId;\r\n    const item = this.actor.items.get(itemId);\r\n    // await this.displayCard(dataset, element, actor)\r\n    return item.use({}, { event });\r\n  }\r\n\r\n  async _onAttackUse(event) {\r\n    event.preventDefault();\r\n    console.log(event);\r\n    const data = event.target.dataset;\r\n    const attack = this.actor.system.attacks.filter(a => a.id === data.attack)[0];\r\n    const attackProfile = attack.profiles.flat().filter(ap => ap.id === + data.attackprofile)[0];\r\n    useAttack(attack, attackProfile, this.actor);\r\n  }\r\n}\r\n","// TODO: Tagify and rollup using vite with .js?\r\nimport { onManageActiveEffect, prepareActiveEffectCategories } from \"../helpers/effects.mjs\";\r\nimport { onManageRule } from \"../rules/rules.mjs\";\r\nimport { options } from \"../rules/rule-field.mjs\";\r\n\r\n/**\r\n * Extend the basic ItemSheet with some very simple modifications\r\n * @extends {ItemSheet}\r\n */\r\nexport class AbbrewItemSheet extends ItemSheet {\r\n\r\n  /** @override */\r\n  static get defaultOptions() {\r\n    return mergeObject(super.defaultOptions, {\r\n      classes: [\"abbrew\", \"sheet\", \"item\"],\r\n      width: 520,\r\n      height: 480,\r\n      tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"description\" }]\r\n    });\r\n  }\r\n\r\n  /** @override */\r\n  get template() {\r\n    const path = \"systems/abbrew/templates/item\";\r\n    // Return a single sheet for all item types.\r\n    // return `${path}/item-sheet.html`;\r\n\r\n    // Alternatively, you could use the following return statement to do a\r\n    // unique item sheet by type, like `weapon-sheet.html`.\r\n    return `${path}/item-${this.item.type}-sheet.hbs`;\r\n  }\r\n\r\n  /* -------------------------------------------- */\r\n\r\n  /** @override */\r\n  getData() {\r\n    // Retrieve base data structure.\r\n    const context = super.getData();\r\n\r\n    // Use a safe clone of the item data for further operations.\r\n    const itemData = context.item;\r\n\r\n    // Retrieve the roll data for TinyMCE editors.\r\n    context.rollData = {};\r\n    let actor = this.object?.parent ?? null;\r\n    if (actor) {\r\n      context.rollData = actor.getRollData();\r\n    }\r\n\r\n    // Prepare active effects\r\n    context.effects = prepareActiveEffectCategories(this.item.effects);\r\n\r\n    // Add the actor's data to context.data for easier access, as well as flags.\r\n    context.system = itemData.system;\r\n    context.flags = itemData.flags;\r\n\r\n    return context;\r\n  }\r\n\r\n  /* -------------------------------------------- */\r\n\r\n  /** @override */\r\n  activateListeners(html) {\r\n    super.activateListeners(html);\r\n\r\n    // Everything below here is only needed if the sheet is editable\r\n    if (!this.isEditable) {\r\n      return;\r\n    }\r\n\r\n    // Active Effect management\r\n    html.find(\".effect-control\").click(ev => onManageActiveEffect(ev, this.item));\r\n\r\n    // Rules management\r\n    html.find(\".rule-control\").click(async ev => await onManageRule(ev, this.item));\r\n\r\n    // Roll handlers, click handlers, etc. would go here.\r\n  }\r\n\r\n  async _updateObject(event, formData) {\r\n    if (event.handleObj && event.handleObj.type == 'change') {\r\n\r\n      if (event.currentTarget) {\r\n        await this.manualUpdate(event, formData);\r\n      }\r\n      else {\r\n        super._updateObject(event, formData);\r\n      }\r\n    }\r\n\r\n    console.log('form submit prevented');\r\n  }\r\n\r\n  async manualUpdate(event, formData) {\r\n    const target = event.currentTarget;\r\n    if (target.classList.contains(\"rule-editor\")) {\r\n      const dataset = target.dataset;\r\n      const ruleId = dataset.ruleId;\r\n      const field = dataset.field;\r\n      const updateData = formData[target.name];\r\n      let rules = foundry.utils.deepClone(this.item.system.rules);\r\n      const index = rules.findIndex(r => r.id == ruleId);\r\n      rules[index][field] = updateData;\r\n      if (field == \"type\") {\r\n        rules[index].content = options[updateData].template();\r\n      }\r\n      return await this.item.update({\r\n        \"system.rules\": rules\r\n      });\r\n    } else {\r\n      super._updateObject(event, formData);\r\n    }\r\n  }\r\n\r\n  close(options = {}) {\r\n    console.log('closing sheet');\r\n    this.getData();\r\n    super.close(options);\r\n  }\r\n}\r\n","import { AbbrewItemSheet } from \"./item-sheet.mjs\";\r\n\r\nexport class AbbrewItemAnatomySheet extends AbbrewItemSheet {\r\n    /** @override */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        const getInput = (name) => html.querySelector(`input[name=\"${name}\"]`);\r\n    }\r\n\r\n    /** @override */\r\n    get template() {\r\n        const path = \"systems/abbrew/templates/item\";\r\n        // Return a single sheet for all item types.\r\n        // return `${path}/item-sheet.html`;\r\n\r\n        // Alternatively, you could use the following return statement to do a\r\n        // unique item sheet by type, like `weapon-sheet.html`.\r\n        return `${path}/item-anatomy-sheet.hbs`;\r\n    }\r\n\r\n}","/**\r\n * Define a set of template paths to pre-load\r\n * Pre-loaded templates are compiled and cached for fast access when rendering\r\n * @return {Promise}\r\n */\r\nexport const preloadHandlebarsTemplates = async function () {\r\n  return loadTemplates([\r\n\r\n    // Actor partials.\r\n    \"systems/abbrew/templates/actor/parts/actor-features.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-items.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-anatomy.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-resources.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-spells.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-effects.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-attacks.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-defences.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-armour.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-form.hbs\",\r\n    \"systems/abbrew/templates/actor/parts/actor-conditions.hbs\",\r\n    \"systems/abbrew/templates/parts/active-effects.hbs\",\r\n    \"systems/abbrew/templates/chat/damage-roll.hbs\",\r\n    \"systems/abbrew/templates/parts/item-rules.hbs\"\r\n  ]);\r\n};\r\n","export default class AbbrewRoll extends Roll {\r\n    constructor(formula, data, options) {\r\n        super(formula, data, options);\r\n        if (!this.options.configured) {\r\n            this._configureModifiers();\r\n        }\r\n    }\r\n\r\n    static async fromRoll(roll) {\r\n        const newRoll = new this(roll.formula, roll.data, roll.options);\r\n        await newRoll.evaluate({async: true});\r\n        return newRoll;\r\n    }\r\n\r\n    get validD10Roll() {\r\n        return (this.terms[0].rolls[0].terms[0] instanceof Die) && (this.terms[0].rolls[0].terms[0].faces === 10);\r\n    }\r\n\r\n    static EVALUATION_TEMPLATE = \"systems/abbrew/templates/chat/roll-dialog.hbs\";\r\n\r\n    static CHAT_TEMPLATE = \"systems/abbrew/templates/chat/damage-roll.hbs\";\r\n\r\n    async render(flavor, template, isPrivate) {\r\n        template = this.CHAT_TEMPLATE;\r\n\r\n        return super.render(flavor, template, isPrivate);\r\n    }\r\n\r\n    /** @inheritdoc */\r\n    async toMessage(messageData = {}, options = {}) {\r\n\r\n        // return early for invalid roll formula\r\n        if (!this.validD10Roll) {\r\n            return;\r\n        }\r\n\r\n        // Evaluate the roll now so we have the results available to determine whether reliable talent came into play\r\n        if (!this._evaluated) await this.evaluate({ async: true });\r\n\r\n        // Add appropriate advantage mode message flavor and dnd5e roll flags\r\n        // messageData.flavor = messageData.flavor || this.options.flavor;\r\n        // if (this.hasAdvantage) messageData.flavor += ` (${game.i18n.localize(\"DND5E.Advantage\")})`;\r\n        // else if (this.hasDisadvantage) messageData.flavor += ` (${game.i18n.localize(\"DND5E.Disadvantage\")})`;\r\n\r\n        // Add reliable talent to the d20-term flavor text if it applied\r\n        // if (this.validD20Roll && this.options.reliableTalent) {\r\n        //     const d20 = this.dice[0];\r\n        //     const isRT = d20.results.every(r => !r.active || (r.result < 10));\r\n        //     const label = `(${game.i18n.localize(\"DND5E.FlagsReliableTalent\")})`;\r\n        //     if (isRT) d20.options.flavor = d20.options.flavor ? `${d20.options.flavor} (${label})` : label;\r\n        // }\r\n\r\n        // Record the preferred rollMode\r\n        options.rollMode = options.rollMode ?? this.options.rollMode;\r\n        // messageData.flags = { data: { foo: \"bar\", baz: \"fuck\" } };\r\n        return super.toMessage(messageData, options);\r\n    }\r\n\r\n    async configureDialog({ title, template } = {}, options = {}) {\r\n\r\n        // Render the Dialog inner HTML\r\n        const content = await renderTemplate(template ?? this.constructor.EVALUATION_TEMPLATE, {\r\n            formula: `d10!`\r\n        });\r\n\r\n        let defaultButton = \"normal\";\r\n        // switch ( defaultAction ) {\r\n        //   case D20Roll.ADV_MODE.ADVANTAGE: defaultButton = \"advantage\"; break;\r\n        //   case D20Roll.ADV_MODE.DISADVANTAGE: defaultButton = \"disadvantage\"; break;\r\n        // }\r\n\r\n        // Create the Dialog window and await submission of the form\r\n        return new Promise(resolve => {\r\n            new Dialog({\r\n                title,\r\n                content,\r\n                buttons: {\r\n                    advantage: {\r\n                        label: \"1\"/* game.i18n.localize(\"DND5E.Advantage\") */,\r\n                        callback: html => resolve(this._onDialogSubmit(html/* , D20Roll.ADV_MODE.ADVANTAGE */))\r\n                    },\r\n                    normal: {\r\n                        label: \"2\"/* game.i18n.localize(\"DND5E.Normal\") */,\r\n                        callback: html => resolve(this._onDialogSubmit(html/* , D20Roll.ADV_MODE.NORMAL */))\r\n                    },\r\n                    disadvantage: {\r\n                        label: \"3\"/* game.i18n.localize(\"DND5E.Disadvantage\") */,\r\n                        callback: html => resolve(this._onDialogSubmit(html/* , D20Roll.ADV_MODE.DISADVANTAGE */))\r\n                    }\r\n                },\r\n                default: defaultButton,\r\n                close: () => resolve(null)\r\n            }, options).render(true);\r\n        });\r\n    }\r\n\r\n    // async RollAbbrew(element, dataset, actor) {\r\n\r\n    //   // Handle item rolls.\r\n    //   if (dataset.rollType) {\r\n    //     if (dataset.rollType == 'item') {\r\n    //       const itemId = element.closest('.item').dataset.itemId;\r\n    //       const item = actor.items.get(itemId);\r\n    //       if (item) {\r\n    //         return await ChatAbbrew(actor, item);\r\n    //         //   let label = item.name;\r\n    //         //   let roll = new Roll(\"d10! + \" + item.system.formula, actor.getRollData());\r\n    //         //   roll.toMessage({\r\n    //         //     speaker: ChatMessage.getSpeaker({ actor: actor }),\r\n    //         //     flavor: label,\r\n    //         //     rollMode: game.settings.get('core', 'rollMode'),\r\n    //         //   });\r\n    //         //   Hooks.callAll('abbrew.ability', label);\r\n    //         //   return roll;\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    //   // Handle rolls that supply the formula directly.\r\n    //   if (dataset.ability) {\r\n    //     let label = dataset.label ? `[ability] ${dataset.label}` : '';\r\n    //     let roll = new Roll(\"d10 + \" + dataset.ability, actor.getRollData());\r\n    //     roll.toMessage({\r\n    //       speaker: ChatMessage.getSpeaker({ actor: actor }),\r\n    //       flavor: label,\r\n    //       rollMode: game.settings.get('core', 'rollMode'),\r\n    //     });\r\n    //     Hooks.callAll('abbrew.ability', label);\r\n    //     return roll;\r\n    //   }\r\n    // }\r\n\r\n    _onDialogSubmit(html, advantageMode) {\r\n        const form = html[0].querySelector(\"form\");\r\n\r\n        // // Append a situational bonus term\r\n        // if (form.bonus.value) {\r\n        //   const bonus = new Roll(form.bonus.value, this.data);\r\n        //   if (!(bonus.terms[0] instanceof OperatorTerm)) this.terms.push(new OperatorTerm({ operator: \"+\" }));\r\n        //   this.terms = this.terms.concat(bonus.terms);\r\n        // }\r\n\r\n        if (form.weakOrStrong.value) {\r\n            const weakOrStrong = form.weakOrStrong.value;\r\n            if (weakOrStrong < 0) {\r\n                this.options.weak = true;\r\n                this.options.weakValue = Math.abs(weakOrStrong)\r\n            }\r\n            else if (weakOrStrong > 0) {\r\n                this.options.strong = true;\r\n                this.options.strongValue = Math.abs(weakOrStrong)\r\n            }\r\n        }\r\n\r\n        // // Customize the modifier\r\n        // if (form.ability?.value) {\r\n        //   const abl = this.data.abilities[form.ability.value];\r\n        //   this.terms = this.terms.flatMap(t => {\r\n        //     if (t.term === \"@mod\") return new NumericTerm({ number: abl.mod });\r\n        //     if (t.term === \"@abilityCheckBonus\") {\r\n        //       const bonus = abl.bonuses?.check;\r\n        //       if (bonus) return new Roll(bonus, this.data).terms;\r\n        //       return new NumericTerm({ number: 0 });\r\n        //     }\r\n        //     return t;\r\n        //   });\r\n        //   this.options.flavor += ` (${CONFIG.DND5E.abilities[form.ability.value]})`;\r\n        // }\r\n\r\n        // Apply advantage or disadvantage\r\n        // this.options.advantageMode = advantageMode;\r\n        // this.options.rollMode = form.rollMode.value;\r\n        this._configureModifiers();\r\n        return this;\r\n\r\n        // let roll = new Roll(\"d10\", {});\r\n        // roll.toMessage({\r\n        //     speaker: ChatMessage.getSpeaker({ actor: this.actor }),\r\n        //     flavor: \"label\",\r\n        //     rollMode: game.settings.get('core', 'rollMode'),\r\n        // });\r\n        // return roll;\r\n    }\r\n\r\n    _configureModifiers() {\r\n        const d10 = this.terms[0].rolls[0];\r\n\r\n        if (this.options.weak) {\r\n            d10.terms[4].number += this.options.weakValue;\r\n        }\r\n\r\n        if (this.options.strong) {\r\n            d10.terms[0].number += this.options.strongValue;\r\n        }\r\n\r\n        // d10.number = 3;\r\n\r\n        this._formula = this.constructor.getFormula(this.terms);\r\n\r\n        this.options.configured = true;\r\n    }\r\n}","export async function handleTurnStart(combat, updateData, updateOptions) {\r\n    if (updateData.round < combat.round || (updateData.round == combat.round && updateData.turn < combat.turn)) {\r\n        return;\r\n    }\r\n    let nextActor = combat.current.combatantId ? combat.nextCombatant.actor : combat.turns[0].actor;\r\n    await turnStart(nextActor);\r\n}\r\n\r\nasync function turnStart(actor) {\r\n    ChatMessage.create({ content: `${actor.name} starts their turn`, speaker: ChatMessage.getSpeaker({ actor: actor }) });\r\n\r\n    if (actor.system.canBleed) {\r\n        let activeWounds = actor.system.wounds.active;\r\n        console.log(activeWounds);\r\n\r\n        let currentBlood = actor.system.blood.value;\r\n        console.log(currentBlood);\r\n\r\n        let gushingWounds = 0;\r\n        if (activeWounds === 0) {\r\n            await actor.update({ \"system.conditions.gushingWounds\": 0 });\r\n        }\r\n\r\n        if (actor.system.conditions.gushingWounds > 0) {\r\n            gushingWounds = actor.system.conditions.gushingWounds * 5;\r\n        }\r\n\r\n        let bleedPrevention = actor.system.conditions.bleedPrevention;\r\n        if (bleedPrevention > 0) {\r\n            let healingWounds = actor.system.wounds.healing + bleedPrevention;\r\n            await actor.update({ \"system.wounds.healing\": healingWounds });\r\n        }\r\n\r\n        let newBlood = currentBlood - (activeWounds + gushingWounds - bleedPrevention);\r\n        console.log(newBlood);\r\n\r\n        await actor.update({ \"system.blood.value\": newBlood });\r\n\r\n        if (newBlood <= actor.system.blood.nausea) {\r\n            await actor.update({ \"system.conditions.nausea\": 1 });\r\n        } else {\r\n            await actor.update({ \"system.conditions.nausea\": 0 });\r\n        }\r\n\r\n        if (newBlood <= actor.system.blood.unconscious) {\r\n            await actor.update({ \"system.conditions.unconscious\": 1 });\r\n        } else {\r\n            await actor.update({ \"system.conditions.unconscious\": 0 });\r\n        }\r\n    }\r\n\r\n    let armour = actor.system.armour;\r\n    let newArmour = armour.value;\r\n    console.log('Armour: ', armour);\r\n\r\n    if (armour.value < armour.max) {\r\n        getOut: if (actor.effects.find(e => e.label === \"Regenerating\")) {\r\n            console.log('Check for regain Armour');\r\n            // TODO: Replace with Exposed\r\n            if (actor.effects.find(e => e.label === \"Weakened\")) {\r\n                console.log('Exposed so no armour regained');\r\n                break getOut;\r\n            }\r\n\r\n            let armourMultiplier = 1;\r\n            // TODO: Was to be from sundered. just reduce max for that.\r\n            if (actor.effects.find(e => e.label === \"Cursed\")) {\r\n                armourMultiplier = 0.5;\r\n            }\r\n\r\n            console.log('Regain Armour');\r\n            let missingArmour = armour.max - armour.value;\r\n            console.log('Missing Armour: ', missingArmour);\r\n\r\n            newArmour = armour.value + Math.max(Math.floor((missingArmour * armourMultiplier) / 2), 1);\r\n            console.log('newArmour', newArmour);\r\n\r\n        }\r\n    } else {\r\n        newArmour = armour.max;\r\n    }\r\n\r\n    await actor.update({ \"system.armour.value\": newArmour });\r\n}","// Import document classes.\r\nimport { AbbrewActor } from \"./documents/actor.mjs\";\r\nimport { AbbrewItem } from \"./documents/item.mjs\";\r\n// Import sheet classes.\r\nimport { AbbrewActorSheet } from \"./sheets/actor-sheet.mjs\";\r\nimport { AbbrewItemSheet } from \"./sheets/item-sheet.mjs\";\r\nimport { AbbrewItemAnatomySheet } from \"./sheets/item-anatomy-sheet.mjs\";\r\n// Import helper/utility classes and constants.\r\nimport { preloadHandlebarsTemplates } from \"./helpers/templates.mjs\";\r\nimport { ABBREW } from \"./helpers/config.mjs\";\r\nimport AbbrewRoll from \"./helpers/abbrew-roll.mjs\";\r\nimport { handleTurnStart } from \"./helpers/turn-start.mjs\";\r\nimport { ChoiceSetPrompt } from \"./rules/choice-set-prompt.mjs\";\r\n\r\n/* -------------------------------------------- */\r\n/*  Init Hook                                   */\r\n/* -------------------------------------------- */\r\n\r\nHooks.once('init', async function () {\r\n\r\n  Handlebars.registerHelper('json', function (context) {\r\n    return JSON.stringify(context);\r\n  });\r\n\r\n  // Add utility classes to the global game object so that they're more easily\r\n  // accessible in global contexts.\r\n  game.abbrew = {\r\n    AbbrewActor,\r\n    AbbrewItem,\r\n    rollItemMacro\r\n  };\r\n\r\n  // Add custom constants for configuration.\r\n  CONFIG.ABBREW = ABBREW;\r\n\r\n  /**\r\n   * Set an initiative formula for the system\r\n   * @type {String}\r\n   */\r\n  CONFIG.Combat.initiative = {\r\n    formula: \"1d10 + @abilities.dexterity.mod + @abilities.agility.mod + @abilities.wits.mod\",\r\n    decimals: 2\r\n  };\r\n\r\n  // Record Configuration Values\r\n  CONFIG.Dice.AbbrewRoll = AbbrewRoll;\r\n  CONFIG.Dice.rolls.push(AbbrewRoll);\r\n\r\n  // Define custom Document classes\r\n  CONFIG.Actor.documentClass = AbbrewActor;\r\n  CONFIG.Item.documentClass = AbbrewItem;\r\n\r\n  // Register sheet application classes\r\n  Actors.unregisterSheet(\"core\", ActorSheet);\r\n  Actors.registerSheet(\"abbrew\", AbbrewActorSheet, { makeDefault: true });\r\n  Items.unregisterSheet(\"core\", ItemSheet);\r\n  // Items.registerSheet(\"abbrew\", AbbrewItemSheet, { makeDefault: true });\r\n  const sheetEntries = [\r\n    [\"anatomy\", AbbrewItemAnatomySheet],\r\n    [\"item\", AbbrewItemSheet],\r\n    [\"feature\", AbbrewItemSheet],\r\n    [\"spell\", AbbrewItemSheet],\r\n    [\"resource\", AbbrewItemSheet],\r\n    [\"attack\", AbbrewItemSheet],\r\n    [\"defence\", AbbrewItemSheet]\r\n  ]\r\n  for (const [type, Sheet] of sheetEntries) {\r\n    Items.registerSheet(\"abbrew\", Sheet, {\r\n      types: [type],\r\n      label: game.i18n.localize(ABBREW.SheetLabel, { type: type }),\r\n      makeDefault: true,\r\n    });\r\n  }\r\n\r\n  // Preload Handlebars templates.\r\n  return preloadHandlebarsTemplates();\r\n});\r\n\r\n\r\nHooks.on(\"pauseGame\", async function (paused) {\r\n  const actor = game.actors.get(\"rLEUu5Vg7QCj59dE\");\r\n  console.log('paused');\r\n  const items = actor.items;\r\n  const choices = items.map(i => ({ id: i._id, name: i.name }));\r\n  const data = { content: { promptTitle: \"Hello\", choices }, buttons: {} };\r\n  const returned = await new ChoiceSetPrompt(data).resolveSelection();\r\n  console.log(returned);\r\n  // const template = \"systems/abbrew/templates/rules/choice-set-prompt.hbs\";\r\n  // const html = await renderTemplate(template, data);\r\n  // let d = new Dialog({\r\n  //   content: html,\r\n  //   buttons: {},\r\n  //   render: html => console.log(\"Register interactivity in the rendered dialog\"),\r\n  //   close: html => console.log(\"This always is logged no matter which option is chosen\")\r\n  //  });\r\n  //  d.render(true);   \r\n});\r\n\r\n/* -------------------------------------------- */\r\n/*  Handlebars Helpers                          */\r\n/* -------------------------------------------- */\r\n\r\n// If you need to add Handlebars helpers, here are a few useful examples:\r\nHandlebars.registerHelper('concat', function () {\r\n  var outStr = '';\r\n  for (var arg in arguments) {\r\n    if (typeof arguments[arg] != 'object') {\r\n      outStr += arguments[arg];\r\n    }\r\n  }\r\n  return outStr;\r\n});\r\n\r\nHandlebars.registerHelper('toLowerCase', function (str) {\r\n  return str.toLowerCase();\r\n});\r\n\r\nHandlebars.registerHelper(\"isNumber\", function (value) {\r\n  return typeof value === \"number\";\r\n});\r\n\r\n/* -------------------------------------------- */\r\n/*  Ready Hook                                  */\r\n/* -------------------------------------------- */\r\n\r\nHooks.once(\"ready\", async function () {\r\n  // Wait to register hotbar drop hook on ready so that modules could register earlier if they want to\r\n  Hooks.on(\"hotbarDrop\", (bar, data, slot) => createItemMacro(data, slot));\r\n});\r\n\r\n/* -------------------------------------------- */\r\n/*  Hotbar Macros                               */\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {Object} data     The dropped data\r\n * @param {number} slot     The hotbar slot to use\r\n * @returns {Promise}\r\n */\r\nasync function createItemMacro(data, slot) {\r\n  // First, determine if this is a valid owned item.\r\n  if (data.type !== \"Item\") return;\r\n  if (!data.uuid.includes('Actor.') && !data.uuid.includes('Token.')) {\r\n    return ui.notifications.warn(\"You can only create macro buttons for owned Items\");\r\n  }\r\n  // If it is, retrieve it based on the uuid.\r\n  const item = await Item.fromDropData(data);\r\n\r\n  // Create the macro command using the uuid.\r\n  const command = `game.abbrew.rollItemMacro(\"${data.uuid}\");`;\r\n  let macro = game.macros.find(m => (m.name === item.name) && (m.command === command));\r\n  if (!macro) {\r\n    macro = await Macro.create({\r\n      name: item.name,\r\n      type: \"script\",\r\n      img: item.img,\r\n      command: command,\r\n      flags: { \"abbrew.itemMacro\": true }\r\n    });\r\n  }\r\n  game.user.assignHotbarMacro(macro, slot);\r\n  return false;\r\n}\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {string} itemUuid\r\n */\r\nfunction rollItemMacro(itemUuid) {\r\n  // Reconstruct the drop data so that we can load the item.\r\n  const dropData = {\r\n    type: 'Item',\r\n    uuid: itemUuid\r\n  };\r\n  // Load the item from the uuid.\r\n  Item.fromDropData(dropData).then(item => {\r\n    // Determine if the item loaded and if it's an owned item.\r\n    if (!item || !item.parent) {\r\n      const itemName = item?.name ?? itemUuid;\r\n      return ui.notifications.warn(`Could not find item ${itemName}. You may need to delete and recreate this macro.`);\r\n    }\r\n\r\n    // Trigger the item roll\r\n    item.roll();\r\n  });\r\n}\r\n\r\nHooks.on(\"renderChatLog\", (app, html, data) => AbbrewItem.chatListeners(html));\r\n\r\nHooks.on(\"abbrew.ability\", function (ability) {\r\n  console.log(\"Hooked on \" + ability);\r\n});\r\n\r\nHooks.once(\"dragRuler.ready\", (SpeedProvider) => {\r\n  class AbbrewSpeedProvider extends SpeedProvider {\r\n    get colors() {\r\n      return [\r\n        { id: \"walk\", default: 0x00FF00, name: \"abbrew.speeds.walk\" },\r\n        { id: \"dash\", default: 0xFFFF00, name: \"abbrew.speeds.dash\" },\r\n        { id: \"run\", default: 0xFF8000, name: \"abbrew.speeds.run\" }\r\n      ]\r\n    }\r\n\r\n    getRanges(token) {\r\n      const baseSpeed = token.actor.system.movement.base\r\n\r\n      // A character can always walk it's base speed and dash twice it's base speed\r\n      const ranges = [\r\n        { range: baseSpeed, color: \"walk\" },\r\n        { range: baseSpeed * 2, color: \"dash\" },\r\n        { range: baseSpeed * 3, color: \"run\" }\r\n      ]\r\n\r\n      return ranges\r\n    }\r\n  }\r\n\r\n  dragRuler.registerSystem(\"abbrew\", AbbrewSpeedProvider)\r\n})\r\n\r\n// Combat Start Hooks\r\n\r\nHooks.on(\"combatStart\", async (combat, updateData, updateOptions) => {\r\n  await handleTurnStart(combat, updateData, updateOptions);\r\n});\r\n\r\nHooks.on(\"combatRound\", async (combat, updateData, updateOptions) => {\r\n  await handleTurnStart(combat, updateData, updateOptions);\r\n})\r\n\r\nHooks.on(\"combatTurn\", async (combat, updateData, updateOptions) => {\r\n  await handleTurnStart(combat, updateData, updateOptions);\r\n})\r\n\r\n// Update Hooks\r\n\r\nHooks.on(\"updateActor\", (value) => {\r\n  console.log('ActorUpdated');\r\n})\r\n\r\nHooks.on(\"updateToken\", (value) => {\r\n  console.log('TokenUpdated');\r\n})"],"names":["d10Roll","parts","data","title","flavour","dialogOptions","messageData","options","chatMessage","rollMode","flavor","dice","weakness","formula","defaultRollMode","roll","onDamageAccept","AbbrewAttackProfile","id","abilityModifier","damageBase","isWeapon","weapon","isMagic","magic","__publicField","useAttack","attack","attackProfile","actor","rollData","getRollData","rollConfig","getCriticalThreshold","getAmplification","getWeakness","weaponThreshold","damageType","globalThreshold","damageTypeThreshold","calculatedThreshold","event","messageId","message","token","AbbrewRule","label","type","source","valid","rule","actorData","candidate","ABBREW","AbbrewActiveEffect","changes","targetElement","targetType","currentValue","newValue","divisor","elementChanges","sourceValue","ChoiceSetPrompt","$html","element","firstChoice","resolve","force","_a","AbbrewChoiceSet","target","choices","choice","parentItemId","i","parentItem","ruleContent","parsedContent","AbbrewRuleField","content","RuleSource","uuid","onManageRule","item","a","ruleId","rules","r","prepareRules","validRules","sourceTargets","parsedRule","typedRule","applyRule","writeToPath","path","value","pathWrite","keyed","AbbrewActor","systemData","formData","userId","changed","user","flatChanges","flatChangesArray","key","overrideKeys","c","keys","prop","parent","obj","embeddedName","documents","result","r1","r2","ruleChange","override","documentClass","updates","pack","tags","armourPoints","defences","k","v","attacks","w","results","wp","index","profileParts","attackType","requirements","equip","ability","base","limbs","naturalBonuses","naturalValue","b","initialValue","fullArmourMax","accumulator","defencesArray","sum","damageRolls","attackData","damage","damageRoll","damagePenetrate","currentArmour","newArmour","untypedCritical","damageTypeDefence","criticalExplosions","penetrate","armourAdjustment","fullDamage","damageThroughArmour","availableArmour","damageToArmour","currentBlood","maxBlood","diceResults","maximiseDifference","vulnerable","negate","criticalThreshold","activeWounds","pain","_","AbbrewItem","speaker","config","templateData","html","chatData","card","htmlOptions","props","p","button","action","storedData","err","context","actorId","targets","ChatAbbrew","dataset","onManageActiveEffect","owner","li","effect","prepareActiveEffectCategories","effects","categories","AbbrewActorSheet","anatomy","resources","abilities","gear","features","spells","ev","handler","dataSet","weaponId","armourId","header","itemData","itemId","ap","AbbrewItemSheet","field","updateData","AbbrewItemAnatomySheet","preloadHandlebarsTemplates","AbbrewRoll","newRoll","template","isPrivate","defaultButton","advantageMode","form","weakOrStrong","d10","handleTurnStart","combat","updateOptions","nextActor","turnStart","gushingWounds","bleedPrevention","healingWounds","newBlood","armour","getOut","e","armourMultiplier","missingArmour","rollItemMacro","sheetEntries","Sheet","paused","returned","outStr","arg","str","bar","slot","createItemMacro","command","macro","m","itemUuid","dropData","itemName","app","SpeedProvider","AbbrewSpeedProvider","baseSpeed"],"mappings":"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"}