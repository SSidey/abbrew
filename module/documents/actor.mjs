/**
 * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.
 * @extends {Actor}
 */
export default class AbbrewActor extends Actor {
  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset (to clear active effects),
    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't 
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
    const actorData = this;
    const flags = actorData.flags.abbrew || {};
  }

  /**
   * 
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic 
   * approach is useful when you have actors & items that share a parent Document, 
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return { ...super.getRollData(), ...this.system.getRollData?.() ?? null };
  }

  takeDamage(rolls, data) {
    console.log('Got me');
    let guard = this.system.defense.guard.value;
    let activeWounds = this.system.wounds.active.value;
    const maxGuardDamage = this.system.defense.damageReduction.reduce((a, b) => {
      if (b.value > a) {
        a = b.value;
      }
      return a;
    }, 1);
    // TODO: Do we want guard damage to scale with weapon damage?
    // const guardDamage = Math.min(maxGuardDamage, damage);

    // TODO: Pass Damage Types
    // TODO: Determine DRs by damage type

    const guardBreak = rolls[0].dice[0].results[0].result > guard;
    if (guardBreak) {
      data.totalSuccesses += 1;
    }

    const damageReduction = data.totalSuccesses === 0 ? this.system.defense.damageReduction.filter(dr => dr.type === 'physical')[0].value : 0;

    const wounds = data.totalSuccesses >= 0 ? activeWounds + Math.max(0, data.damage - damageReduction) : 0;

    guard = Math.max(0, guard - maxGuardDamage);

    const updates = { "system.wounds.active.value": wounds, "system.defense.guard.value": guard };
    this.update(updates);
  }

}
